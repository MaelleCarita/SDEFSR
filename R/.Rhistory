if(regla[k] < max_valores_regla[k]){  #Variable interviene en la regla
if(tipo_reglas[k] == "c"){  #Variables categoricas
if(! is.perdido(max_valores = max_valores_ejemplo, i = k , value = dataset[i,k] )   &&  dataset[i,k] != regla[k]){
dispFuzzy <- 0
dispCrisp <- 0   # No compatibles.
}
} else {  #Variables numericas
if(! is.perdido(max_valores = max_valores_ejemplo, i = k , value = dataset[i,k] )){
#Fuzzy Computation
pertenencia <- grado_pertenencia(x = dataset[i,k], variable = fuzzy_subsets[[k]], conjunto = regla[k])
dispFuzzy <- min(dispFuzzy, pertenencia)
#Crisp Computation
if(pertenencia == 0) dispCrisp <- 0
}
}
}
}
if(dataset[i,NCOL(dataset) - 1] == target_class && dispFuzzy > 0){
ejemplosNuevos_cubiertos <- ejemplosNuevos_cubiertos + 1
}
}
}
# ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
} else { #Reglas DNF
}
ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
}
soporte(regla = rule, dataset = saheart$data, max_valores_regla = replicate(NCOL(saheart$data) - 1, params$nLabels) , max_valores_ejemplos = saheart$max, tipo_reglas = saheart$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = fuzzySets, examples_of_the_class = 200, target_class = params$targetClass)
debugSource('~/SDIGA/R/Quality_measures.R')
soporte(regla = rule, dataset = saheart$data, max_valores_regla = replicate(NCOL(saheart$data) - 1, params$nLabels) , max_valores_ejemplos = saheart$max, tipo_reglas = saheart$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = fuzzySets, examples_of_the_class = 200, target_class = params$targetClass)
soporte <- function(regla, dataset, max_valores_regla, max_valores_ejemplos, tipo_reglas, DNF_Rules, fuzzy_subsets, examples_of_the_class, target_class){
ejemplo_noCubiertos <- 0         #Ejemplos no cubiertos por ninguna regla
ejemplosNuevos_cubiertos <- 0    #Ejemplos no cubiertos que si estÃ¡n cubiertos por la nueva regla
if(! DNF_Rules){
# Para cada ejemplo
for(i in NROW(dataset)){
if(dataset[i, NCOL(dataset)]  == FALSE){
ejemplo_noCubiertos <- ejemplo_noCubiertos + 1
dispFuzzy <- 1  #Fuzzy Support
dispCrisp <- 1  #Crisp Support
#para cada variable de la regla
for(k in 1:NROW(regla)){
if(regla[k] < max_valores_regla[k]){  #Variable interviene en la regla
if(tipo_reglas[k] == "c"){  #Variables categoricas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )   &&  dataset[i,k] != regla[k]){
dispFuzzy <- 0
dispCrisp <- 0   # No compatibles.
}
} else {  #Variables numericas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )){
#Fuzzy Computation
pertenencia <- grado_pertenencia(x = dataset[i,k], variable = fuzzy_subsets[[k]], conjunto = regla[k])
dispFuzzy <- min(dispFuzzy, pertenencia)
#Crisp Computation
if(pertenencia == 0) dispCrisp <- 0
}
}
}
}
if(dataset[i,NCOL(dataset) - 1] == target_class && dispFuzzy > 0){
ejemplosNuevos_cubiertos <- ejemplosNuevos_cubiertos + 1
}
}
}
# ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
} else { #Reglas DNF
}
ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
}
soporte(regla = rule, dataset = saheart$data, max_valores_regla = replicate(NCOL(saheart$data) - 1, params$nLabels) , max_valores_ejemplos = saheart$max, tipo_reglas = saheart$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = fuzzySets, examples_of_the_class = 200, target_class = params$targetClass)
saheart$max
saheart$min
strsplit(x = "{Present, Absent}", split = ",")
NROW( strsplit(x = "{Present, Absent}", split = ",")[[1]] )
saheart$atributeTypes
saheart <- read.keel("C:\\saheart.dat")
source('~/SDIGA/R/leer_datos.R')
source('~/SDIGA/R/leer_datos.R')
saheart <- read.keel("C:\\saheart.dat")
source('~/SDIGA/R/leer_datos.R')
source('~/SDIGA/R/leer_datos.R')
saheart <- read.keel("C:\\saheart.dat")
breast <- read.keel("C:\\breast.dat")
rule <- AG(att_obj = params$targetClass, tam_poblacion = params$popLength, num_evaluaciones = params$nEval, prob_mutation = params$mutProb, DNF_Rules = FALSE, dataset = breast, valores_variables = replicate(NCOL(saheart$data) - 1, params$nLabels), pesos_variables = c(params$w1, params$w2, params$w3) , num_examples_rule = 0, tipos_reglas = breastt$atributeTypes)
dameConjuntos <- function(data_types, max, n_labels) {
salida <- NULL
for(i in 1:NROW(data_types) ){
if(data_types[i] == "c"){
salida[NROW(salida) + 1] <- max[i]
} else {
salida[NROW(salida) + 1] <- n_labels
}
}
salida
}
rule <- AG(att_obj = params$targetClass, tam_poblacion = params$popLength, num_evaluaciones = params$nEval, prob_mutation = params$mutProb, DNF_Rules = FALSE, dataset = breast, valores_variables = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), pesos_variables = c(params$w1, params$w2, params$w3) , num_examples_rule = 0, tipos_reglas = breastt$atributeTypes)
rule
soporte(regla = rule, dataset = breast$data, max_valores_regla = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), max_valores_ejemplos = breast$max, tipo_reglas = breast$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = create_fuzzyIntervals(min = breast$min, max = breast$max, num_sets = params$nLabels, types = breast$atributeTypes), examples_of_the_class = 200, target_class = 2)
2 == "2"
breast$data
breast$data[, NCOL(breast$data) + 1] <- FALSE
rule <- AG(att_obj = params$targetClass, tam_poblacion = params$popLength, num_evaluaciones = params$nEval, prob_mutation = params$mutProb, DNF_Rules = FALSE, dataset = breast, valores_variables = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), pesos_variables = c(params$w1, params$w2, params$w3) , num_examples_rule = 0, tipos_reglas = breastt$atributeTypes)
soporte(regla = rule, dataset = breast$data, max_valores_regla = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), max_valores_ejemplos = breast$max, tipo_reglas = breast$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = create_fuzzyIntervals(min = breast$min, max = breast$max, num_sets = params$nLabels, types = breast$atributeTypes), examples_of_the_class = 200, target_class = 2)
debugSource('~/SDIGA/R/Quality_measures.R')
soporte <- function(regla, dataset, max_valores_regla, max_valores_ejemplos, tipo_reglas, DNF_Rules, fuzzy_subsets, examples_of_the_class, target_class){
ejemplo_noCubiertos <- 0         #Ejemplos no cubiertos por ninguna regla
ejemplosNuevos_cubiertos <- 0    #Ejemplos no cubiertos que si estÃ¡n cubiertos por la nueva regla
if(! DNF_Rules){
# Para cada ejemplo
for(i in NROW(dataset)){
if(dataset[i, NCOL(dataset)]  == FALSE){
ejemplo_noCubiertos <- ejemplo_noCubiertos + 1
dispFuzzy <- 1  #Fuzzy Support
dispCrisp <- 1  #Crisp Support
#para cada variable de la regla
for(k in 1:NROW(regla)){
if(regla[k] < max_valores_regla[k]){  #Variable interviene en la regla
if(tipo_reglas[k] == "c"){  #Variables categoricas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )   &&  dataset[i,k] != regla[k]){
dispFuzzy <- 0
dispCrisp <- 0   # No compatibles.
}
} else {  #Variables numericas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )){
#Fuzzy Computation
pertenencia <- grado_pertenencia(x = dataset[i,k], variable = fuzzy_subsets[[k]], conjunto = regla[k])
dispFuzzy <- min(dispFuzzy, pertenencia)
#Crisp Computation
if(pertenencia == 0) dispCrisp <- 0
}
}
}
}
if(dataset[i,NCOL(dataset) - 1] == target_class && dispCrisp > 0){
ejemplosNuevos_cubiertos <- ejemplosNuevos_cubiertos + 1
}
}
}
# ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
} else { #Reglas DNF
}
ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
}
soporte(regla = rule, dataset = breast$data, max_valores_regla = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), max_valores_ejemplos = breast$max, tipo_reglas = breast$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = create_fuzzyIntervals(min = breast$min, max = breast$max, num_sets = params$nLabels, types = breast$atributeTypes), examples_of_the_class = 200, target_class = 2)
soporte <- function(regla, dataset, max_valores_regla, max_valores_ejemplos, tipo_reglas, DNF_Rules, fuzzy_subsets, examples_of_the_class, target_class){
ejemplo_noCubiertos <- 0         #Ejemplos no cubiertos por ninguna regla
ejemplosNuevos_cubiertos <- 0    #Ejemplos no cubiertos que si estÃ¡n cubiertos por la nueva regla
if(! DNF_Rules){
# Para cada ejemplo
for(i in 1:NROW(dataset)){
if(dataset[i, NCOL(dataset)]  == FALSE){
ejemplo_noCubiertos <- ejemplo_noCubiertos + 1
dispFuzzy <- 1  #Fuzzy Support
dispCrisp <- 1  #Crisp Support
#para cada variable de la regla
for(k in 1:NROW(regla)){
if(regla[k] < max_valores_regla[k]){  #Variable interviene en la regla
if(tipo_reglas[k] == "c"){  #Variables categoricas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )   &&  dataset[i,k] != regla[k]){
dispFuzzy <- 0
dispCrisp <- 0   # No compatibles.
}
} else {  #Variables numericas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )){
#Fuzzy Computation
pertenencia <- grado_pertenencia(x = dataset[i,k], variable = fuzzy_subsets[[k]], conjunto = regla[k])
dispFuzzy <- min(dispFuzzy, pertenencia)
#Crisp Computation
if(pertenencia == 0) dispCrisp <- 0
}
}
}
}
if(dataset[i,NCOL(dataset) - 1] == target_class && dispCrisp > 0){
ejemplosNuevos_cubiertos <- ejemplosNuevos_cubiertos + 1
}
}
}
# ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
} else { #Reglas DNF
}
ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
}
soporte(regla = rule, dataset = breast$data, max_valores_regla = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), max_valores_ejemplos = breast$max, tipo_reglas = breast$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = create_fuzzyIntervals(min = breast$min, max = breast$max, num_sets = params$nLabels, types = breast$atributeTypes), examples_of_the_class = 200, target_class = 2)
head(breast$data)
breast$data[, 4 == 2]
breast$data[, mitoses == 2]
breast$data[, $mitoses == 2]
breast$data[, breast$mitoses == 2]
breast$data[, breast$mitoses == 1]
breast$data[1,2]
breast$data[1,2] == rule[4]
soporte <- function(regla, dataset, max_valores_regla, max_valores_ejemplos, tipo_reglas, DNF_Rules, fuzzy_subsets, examples_of_the_class, target_class){
ejemplo_noCubiertos <- 0         #Ejemplos no cubiertos por ninguna regla
ejemplosNuevos_cubiertos <- 0    #Ejemplos no cubiertos que si estÃ¡n cubiertos por la nueva regla
if(! DNF_Rules){
# Para cada ejemplo
for(i in 1:NROW(dataset)){
if(dataset[i, NCOL(dataset)]  == FALSE){
ejemplo_noCubiertos <- ejemplo_noCubiertos + 1
dispFuzzy <- 1  #Fuzzy Support
dispCrisp <- 1  #Crisp Support
#para cada variable de la regla
for(k in 1:NROW(regla)){
if(regla[k] < max_valores_regla[k]){  #Variable interviene en la regla
if(tipo_reglas[k] == "c"){  #Variables categoricas
if( (! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] ) )   &&  dataset[i,k] != regla[k]){
dispFuzzy <- 0
dispCrisp <- 0   # No compatibles.
}
} else {  #Variables numericas
if(! is.perdido(max_valores = max_valores_ejemplos, i = k , value = dataset[i,k] )){
#Fuzzy Computation
pertenencia <- grado_pertenencia(x = dataset[i,k], variable = fuzzy_subsets[[k]], conjunto = regla[k])
dispFuzzy <- min(dispFuzzy, pertenencia)
#Crisp Computation
if(pertenencia == 0) dispCrisp <- 0
}
}
}
}
if(dataset[i,NCOL(dataset) - 1] == target_class && dispCrisp > 0){
ejemplosNuevos_cubiertos <- ejemplosNuevos_cubiertos + 1
}
}
}
# ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
} else { #Reglas DNF
}
ejemplosNuevos_cubiertos / examples_of_the_class # Our definition
}
soporte(regla = rule, dataset = breast$data, max_valores_regla = dameConjuntos(data_types = breast$atributeTypes, max = breast$max, n_labels = params$nLabels), max_valores_ejemplos = breast$max, tipo_reglas = breast$atributeTypes, DNF_Rules = FALSE, fuzzy_subsets = create_fuzzyIntervals(min = breast$min, max = breast$max, num_sets = params$nLabels, types = breast$atributeTypes), examples_of_the_class = 200, target_class = 2)
source('~/SDIGA/R/leer_datos.R')
debugSource('~/SDIGA/SDIGA.R')
debugSource('~/SDIGA/R/Quality_measures.R')
load("E:/MEGASync/MEGAsync/Universidad/Investigacion/DATASETS/australian/.RData")
setwd("E:/MEGASync/MEGAsync/Universidad/Investigacion/DATASETS/australian/.RData")
a$by.self
setwd("E:\\MEGASync\\MEGAsync\\Universidad\\Investigacion\\DATASETS\\australian\\.RData")
SDIGA("E:\\MEGASync\\MEGAsync\\Universidad\\Investigacion\\DATASETS\\australian\\PARAM1.txt")
debugSource('E:/Escritorio/SD-R/ga.R')
setwd("E:\\MEGASync\\MEGAsync\\Universidad\\Investigacion\\DATASETS\\australian\\.RData")
SDIGA("E:\\MEGASync\\MEGAsync\\Universidad\\Investigacion\\DATASETS\\australian\\PARAM1.txt")
setwd("E:\\MEGASync\\MEGAsync\\Universidad\\Investigacion\\DATASETS\\australian\\.RData")
source('E:/Escritorio/SD-R/Difuso.R')
runif(1, 0,3)
randInt <- function(low, high){  return (low + (high - low) * runif(1) )}
randInt <- function(low, high){  return ( low + (high - low) * runif(1) )}
randInt <- function(low, high){
return ( low + (high - low) * runif(1) )
}
library("microbenchmark", lib.loc="E:/Programas/R-3.1.3/library")
microbenchmark(randInt(0,3), sample(x = 0:3, size = 1), unit = "relative")
randInt <- function(low, high){
low + (high - low) * runif(1)
}
microbenchmark(randInt(0,3), sample(x = 0:3, size = 1), unit = "relative")
microbenchmark(replicate(3,randInt(0,3)), sample(x = 0:3, size = 3), unit = "relative")
replicate(3, randInt(0,3)); sample(0:3, 3)
randInt2 <- function(low, high){
return( low + (high - low) * runif(1) )
}
microbenchmark(randInt(0,3), randInt1(0,3), unit = "relative")
microbenchmark(randInt(0,3), randInt2(0,3), unit = "relative")
install.packages("shiny")
library("shiny", lib.loc="E:/Programas/R-3.1.3/library")
runExample("01_hello")
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
load("E:/Escritorio/Sesion practica MW.RData")
pairs(x = duracionVisitas)
plot(x = duracionVisitas[,1], y = duracionVisitas[,2])
View(duracionVisitas)
plot(x = seq_len(NROW(duracionVisitas)), y = as.numeric(duracionVisitas[,2]))
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
duracionVisitas <- getDuracionVisitas(sesiones)
View(duracionVisitas)
plot(x = seq_len(NROW(duracionVisitas)), y = as.numeric(duracionVisitas[,2]))
View(duracionVisitas)
lm(seq_len(NROW(duracionVisitas)) ~ as.numeric(duracionVisitas[,2]))
formula <- lm(seq_len(NROW(duracionVisitas)) ~ as.numeric(duracionVisitas[,2]))
abline(formula)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas)
formula
formula[[1]]
formula[[1]][1]
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
formula[[1]][1]
mostrarDiagramaConEcuacion(duracionVisitas)
cantidadPeticiones <- getCantidadPaginasPorSesion(sesiones)
cantidadPeticiones
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
cantidadPeticiones <- getCantidadPaginasPorSesion(sesiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
duracionVisitas <- getDuracionVisitas(sesiones)
View(duracionVisitas)
cbind(duracionVisitas[,2], cantidadPeticiones)
cbind(duracionVisitas[,2], cantidadPeticiones[which(cantidadPeticiones > 1)])
plot( cbind(duracionVisitas[,2], cantidadPeticiones[which(cantidadPeticiones > 1)]) )
plot( cbind(cantidadPeticiones[which(cantidadPeticiones > 1)], duracionVisitas[,2]) )
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones)
mostrarDiagramaConEcuacion <- function(duracionVisitas, cantidadPeticiones){
diagrama <- cbind(as.numeric(cantidadPeticiones[which(cantidadPeticiones > 1)]), as.numeric(duracionVisitas[,2]))
formula <- lm(diagrama[, 1] ~ diagrama[,2], data = as.data.frame(diagrama))
plot(diagrama, xlab = "Peticiones por página", ylab = "Duración visita")
abline(formula)
print(paste("Ecuacion: ", formula[[1]][1], "x + ", formula[[1]][2], "y", sep = ""))
}
debugSource('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
View(duracionVisitas)
save.image("E:/Escritorio/Sesion practica MW.RData")
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
getDuracionVisitas(sesiones)
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
debugSource('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
debugSource('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
debugSource('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
duracion[visits]
View(diagrama)
debugSource('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarDiagramaConEcuacion(duracionVisitas = duracionVisitas, cantidadPeticiones = cantidadPeticiones)
cantidadPeticiones
duracionVisitas
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas = duracionVisitas)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas = duracionVisitas)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas = duracionVisitas)
tiempoMedio <- calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
mostrarTablaMenorTiempoMedio(tiempoMedio)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
save.image("E:/Escritorio/Sesion practica MW.RData")
mostrarDiagramaConEcuacion(duracionVisitas, cantidadPeticiones = cantidadPeticiones)
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
tiempoMedio <- calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas)
which(tiempoMedio <= 0.5)
which(tiempoMedio < 1)
tiempoMedio[☺294]
tiempoMedio[294]
cantidadPeticiones[294]
cantidadPeticiones[which(cantidadPeticiones > 1)][294]
duracionVisitas["Sesion 350"]
source('~/MEGA/MEGAsync/Universidad/4º/2º cuatrimestre/Mineria Web/Practicas/Practica 4/Funciones Ejercicios.R')
save.image("E:/Escritorio/Sesion practica MW.RData")
getCantidadPaginasPorSesion(sesiones)
getDuracionVisitas(sesiones)
calcularTiempoMedioPorPagina(cantidadPeticiones, duracionVisitas)
install.packages("shiny")
library("shiny", lib.loc="E:/Programas/R-3.1.3/library")
runExample("01_hello")
sumaVectorizada <- function(vector){
vector <- vector + 1
vector
}
sumaFor <- function(vector){
for(i in seq_len(length(vector))){
vector[i] <- vector[i] + 1
}
vector
}
values <- numeric(1e6)
microbenchmark::microbenchmark(sumaFor(values), sumaVectorizada(values), unit = "relative" )
comparacionVectorizada <- function(v1, v2){
salida <- v1 < v2
salida
}
comparacionFor <- function(v1, v2){
salida <- logical(length(v1))
for(i in seq_len(length(v1))){
salida[i] <- v1[i] < v2[i]
}
salida
}
values1 <- numeric(1e6) + 1
microbenchmark::microbenchmark(comparacionFor(values), comparacionVectorizada(values), unit = "relative" )
microbenchmark::microbenchmark(comparacionFor(values, values1), comparacionVectorizada(values, values1), unit = "relative" )
citation()
sumaLapply <- function(vector){
vector <- lapply(X = vector, FUN = '+', 1)
vector
}
microbenchmark::microbenchmark(sumaFor(values), sumaVectorizada(values), sumaLapply(vector), unit = "relative" )
microbenchmark::microbenchmark(sumaFor(values), sumaVectorizada(values), sumaLapply(values), unit = "relative" )
values <- numeric(1e6)
microbenchmark::microbenchmark(sumaFor(values), sumaVectorizada(values), sumaLapply(values), unit = "relative" )
citation()
#1
f <- function(x) NULL
#2
s3 <- function(x) UseMethod("s3")
s3.integer <- f
#3
A <- setClass("A", representation(a = "list"))
setGeneric("s4", function(x) standardGeneric("s4"))
setMethod(s4, "A", f)
#4
B <- setRefClass("B", methods = list(rc = f))
a <- A()
b <- B$new()
microbenchmark(
fun = f(),
S3 = s3(1L),
S4 = s4(a),
RC = b$rc()
)
microbenchmark::microbenchmark(
fun = f(),
S3 = s3(1L),
S4 = s4(a),
RC = b$rc()
)
microbenchmark::microbenchmark(
fun = f(),
S3 = s3(1L),
S4 = s4(a),
RC = b$rc()
, unit = "relative")
install.packages("GA")
calificaciones <- c( 9.1,
10  ,
7    ,
7.2 ,
9    ,
8.2 ,
7    ,
10    ,
8     ,
8.3 ,
8.3  ,
9.2,
7.5,
7.6 ,
5   ,
7.8,
8.2 ,
9    ,
9     ,
8     ,
8.5   ,
9.5 ,
9 ,
9.9 ,
9.3  ,
9 ,
6  ,
8   ,
8    ,
7.8   ,
10,
10 ,
8   ,
7.9  ,
9.2 ,
9    ,
9     ,
8.2   )
mean(calificaciones)
mean(c(calificaciones, 10 , 10))
mean(c(calificaciones, 8 , 8))
mean(c(calificaciones, 9 , 9))
mean(c(calificaciones, 8.5 , 8.5))
SDR::SDR_GUI()
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
SDR::SDR_GUI()
devtools::install_github('aklxao2/SDR')
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR")
shinyapps::deployApp()
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/inst/shiny")
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp()
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp()
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/R")
shinyapps::deployApp()
shinyapps::deployApp()
