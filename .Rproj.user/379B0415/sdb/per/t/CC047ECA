{
    "contents" : "\n#\n#\n# Calculate the volume of a sphere in n dimensions for SPEA2 fitness calculation.\n#\n#\n.volSphere <- function(dimensions){\n  vol = 1\n  \n  if(dimensions %% 2 == 0){\n    d2 <- dimensions / 2\n    for ( i in seq_len(d2))\n      vol <- vol * i\n    vol <- (pi^d2) / vol\n    \n  } else {\n    v <- (dimensions-1)/2+1\n    for ( i in v:dimensions)\n      vol <- vol * i;\n    vol = 2^dimensions * pi^(v - 1) * vol\n  }\n  vol\n}\n\n\n\n\n\n#\n#\n# Mutation operator for MESDIF\n#\n#\n.mutateMESDIF <- function(cromosoma, variable, max_valor_variables, DNF_Rule){\n  \n  \n  mutation_type <- sample(x = 1:2, size = 1)   #Type 1 -> Eliminate the variable, Type 2 -> change the value for a random one\n  \n  \n  if(! DNF_Rule){  #Reglas can?nicas\n    if(mutation_type == 1L){\n      \n      cromosoma[variable] <- max_valor_variables[variable] #Se pone el valor de no participacion\n      \n    } else {  #Assign a random value (elimination value NOT INCLUDED)\n      \n      value <- sample(x = 0:(max_valor_variables[variable] - 1), size = 1)\n      cromosoma[variable] <- value \n      \n    }\n    \n  } else { #Reglas DNF\n    \n    variable <- variable + 1\n    rango <- (max_valor_variables[variable - 1] + 1):max_valor_variables[variable]\n    \n    \n    if(mutation_type == 1){  #Valor de no participaci?n de la variable\n      \n      cromosoma[rango] <- 0\n      \n    } else {  #Asigna valor aleatorio en la variable\n      \n      cromosoma[rango] <- sample(x = 0:1 , size = length(rango), replace = TRUE)\n      \n    }\n    \n  }\n  \n  \n  \n  cromosoma  # Return\n  \n}\n\n\n\n\n\n#\n#\n# Truncation operator for the elite population in MESDIF\n# This is called when the number of non-dominated individuals are greater than elite population size.\n#\n#\n.truncOperator <- function(NonDominatedPop, elitePopSize, FitnessND ){\n  #Calculate distance between individuals\n  distancia <- as.matrix( dist(x = FitnessND, method = \"euclidean\") ) ^2\n \n  #Distance between themselves eliminated.\n  diag(distancia) <- Inf\n  \n  #Order the distance matrix\n  sortedIndex <- apply(X = distancia, MARGIN = 1,FUN = order)\n  \n  individuos <- NROW(NonDominatedPop)\n  noMantener <- logical(individuos)\n  \n  while(individuos > elitePopSize){\n    \n    #Find the minimal distance among individuals\n    minimo <- which(distancia == min(distancia), arr.ind = TRUE,useNames = FALSE)\n  \n    if(NROW(minimo) == 1){\n      #Remove the individual directly\n      noMantener[minimo[,2]] <- T\n      distancia[minimo[,2],  ] <- Inf\n      distancia[,minimo[,2]  ] <- Inf\n      \n    } else {\n      \n    fila <- minimo[1,1]\n    columna <- minimo[1,2]\n    \n    \n    #We found the two closest individuals, now we have to erase one of them. This will be who have the minimum distance between his k-th closest neighbour\n    pos <- 1\n    while(distancia[sortedIndex[pos,fila], fila]== distancia[sortedIndex[pos,columna], columna] & pos < NROW(distancia)){\n      pos <- pos + 1\n    }\n \n    #Erase the closest individual\n    if(distancia[sortedIndex[pos,fila],fila] < distancia[sortedIndex[pos,columna],columna]){\n   \n      noMantener[fila] <- T\n      distancia[fila,  ] <- Inf\n      distancia[,fila  ] <- Inf\n      \n      #The position in sortedIndex is now the last.\n      sortedIndex <- apply(sortedIndex, MARGIN = 2, function(x, value, individuos){\n        x[which(x == value):(individuos - 1)] <- x[which(x == value):(individuos - 1) + 1];\n        x[individuos] <- value;\n        x\n      }, fila, individuos)\n      \n    } else {\n      \n      noMantener[columna] <- T\n      distancia[, columna] <- Inf\n      distancia[columna, ] <- Inf\n     \n      sortedIndex <- apply(sortedIndex, MARGIN = 2, function(x, value, individuos){\n            x[which(x == value):(individuos - 1)] <- x[which(x == value):(individuos - 1) + 1];\n            x[individuos] <- value;\n            x\n            }, columna, individuos)\n      \n    }\n    }\n    \n    individuos <- individuos - 1\n  }\n \n list(poblation = NonDominatedPop[which(! noMantener), , drop = F], individuals = which(! noMantener) )\n}\n\n\n\n#' \n#' @title Multiobjective Evolutionary Subgroup DIscovery Fuzzy rules (MESDIF) Algorithm\n#' @description Performs a subgroup discovery task executing the algorithm MESDIF\n#' \n#' @param paramFile The path of the parameters file. \\code{NULL} If you want to use training and test \\code{keel} variables\n#' @param training A \\code{keel} class variable with training data.\n#' @param test A \\code{keel} class variable with test data.\n#' @param output character vector with the paths where store information file, rules file and test quality measures file, respectively.\n#' @param seed An integer to set the seed used for generate random numbers.\n#' @param nLabels Number of fuzzy labels defined in the datasets.\n#' @param nEval An integer for set the maximum number of evaluations in the evolutive process.\n#' @param popLength An integer to set the number of individuals in the population.\n#' @param eliteLength An integer to set the number of individuals in the elite population.\n#' @param crossProb Sets the crossover probability. A number in [0,1].\n#' @param mutProb Sets the mutation probability. A number in [0,1].\n#' @param RulesRep Representation used in the rules. \"can\" for canonical rules, \"dnf\" for DNF rules.\n#' @param Obj1 Sets the Objective number 1. See \\code{Objective values} for more information about the possible values.\n#' @param Obj2 Sets the Objective number 2. See \\code{Objective values} for more information about the possible values.\n#' @param Obj3 Sets the Objective number 3. See \\code{Objective values} for more information about the possible values.\n#' @param Obj4 Sets the Objective number 4. See \\code{Objective values} for more information about the possible values.\n#' @param targetClass A string specifing the value the target variable. \\code{null} for search for all possible values.\n#' \n#' \n#' @details This function sets as target variable the last one that appear in the KEEL file. If you want \n#'     to change the target variable, you can use \\link{changeTargetVariable} for this objective.  \n#'     The target variable MUST be categorical, if it is not, throws an error.\n#'     \n#'     If you specify in \\code{paramFile} something distintc to \\code{NULL} the rest of the parameters are\n#'     ignored and the algorithm tries to read the file specified. See \"Parameters file structure\" below \n#'     if you want to use a parameters file.\n#' \n#' @section How does this algorithm work?:\n#'   This algorithm performs a multi-objective genetic algorithm based on elitism (following the SPEA2 approach). The elite population has \n#'   a fixed size and it is filled by non-dominated individuals.\n#'   \n#'   An individual is non-dominated when \\code{(! all(ObjI1 <= ObjI2) & any(ObjI1 < ObjI2))} where ObjI1\n#'   is the objetive value for our individual and ObjI2 is the objetive value for another individual.\n#'   The number of dominated individuals by each one determine, in addition with a niches technique that considers\n#'   the proximity among values of the objectives a fitness value for the selection.\n#'   \n#'   The number of non-dominated individuals might be greater or less than elite population size and in those cases\n#'   MESDIF implements a truncation operator and a fill operator respectively. Then, genetic operators are\n#'   applied.\n#'   \n#'   At the final of the evolutive process it returns the rules stored in elite population.\n#'   \n#' @section Parameters file structure:\n#'   The \\code{paramFile} argument points to a file which has the necesary parameters for MESDIF works.\n#'   This file \\strong{must} be, at least, those parameters (separated by a carriage return):\n#'   \\itemize{\n#'     \\item \\code{algorithm}  Specify the algorithm to execute. In this case. \"MESDIF\"\n#'     \\item \\code{inputData}  Specify two paths of KEEL files for training and test. In case of specify only the name of the file, the path will be the working directory.\n#'     \\item \\code{seed}  Sets the seed for the random number generator\n#'     \\item \\code{nLabels}  Sets the number of fuzzy labels to create when reading the files\n#'     \\item \\code{nEval}  Set the maximun number of \\strong{evaluations of rules} for stop the genetic process\n#'     \\item \\code{popLength}  Sets number of individuals of the main population\n#'     \\item \\code{eliteLength}  Sets number of individuals of the elite population. Must be less than \\code{popLength}  \n#'     \\item \\code{crossProb}  Crossover probability of the genetic algorithm. Value in [0,1]\n#'     \\item \\code{mutProb}  Mutation probability of the genetic algorithm. Value in [0,1]\n#'     \\item \\code{Obj1} Sets the objetive number 1. \n#'     \\item \\code{Obj2} Sets the objetive number 2. \n#'     \\item \\code{Obj3} Sets the objetive number 3. \n#'     \\item \\code{Obj4} Sets the objetive number 4.\n#'     \\item \\code{RulesRep}  Representation of each chromosome of the population. \"can\" for canonical representation. \"dnf\" for DNF representation.\n#'     \\item \\code{targetClass}  Value of the target variable to search for subgroups. The target variable \\strong{is always the last variable.} Use \\code{null} to search for every value of the target variable\n#'   }\n#'   \n#'   An example of parameter file could be:\n#'  \\preformatted{\n#'  algorithm = MESDIF\n#'  inputData = \"irisd-10-1tra.dat\" \"irisd-10-1tst.dat\"\n#'  outputData = \"irisD-10-1-INFO.txt\" \"irisD-10-1-Rules.txt\" \"irisD-10-1-TestMeasures.txt\"\n#'  seed = 0\n#'  nLabels = 3\n#'  nEval = 500\n#'  popLength = 100\n#'  eliteLength = 3\n#'  crossProb = 0.6\n#'  mutProb = 0.01\n#'  RulesRep = can\n#'  Obj1 = comp\n#'  Obj2 = unus\n#'  Obj3 = null\n#'  Obj4 = null\n#'  targetClass = Iris-setosa }\n#'\n#'   @section Objective values:\n#'      You can use the following quality measures in the ObjX value of the parameter file using this values:\n#'       \\itemize{\n#'         \\item Unusualness -> \\code{unus}\n#'         \\item Crisp Support -> \\code{csup}\n#'         \\item Crisp Confidence -> \\code{ccnf}\n#'         \\item Fuzzy Support -> \\code{fsup}\n#'         \\item Fuzzy Confidence -> \\code{fcnf}\n#'         \\item Coverage -> \\code{cove}\n#'         \\item Significance -> \\code{sign}\n#'       }\n#'     \n#'     If you dont want to use a objective value you must specify \\code{null}\n#' \n#' \n#' @return The algorithm shows in the console the following results:\n#' \\enumerate{\n#'  \\item The parameters used in the algorithm\n#'  \\item The rules generated.\n#'  \\item The quality measures for test of every rule and the global results.\n#' }\n#' \n#'     Also, the algorithms save those results in the files specified in the \\code{output} parameter of the algorithm or \n#'     in the \\code{outputData} parameter in the parameters file.\n#'     \n#' \n#' \n#' \n#' @references \n#' \\itemize{\n#'  \\item Berlanga, F., Del Jesus, M., Gonzalez, P., Herrera, F., & Mesonero, M. (2006). Multiobjective Evolutionary Induction of Subgroup Discovery Fuzzy Rules: A Case Study in Marketing.\n#'  \\item Zitzler, E., Laumanns, M., & Thiele, L. (2001). SPEA2: Improving the Strength Pareto Evolutionary Algorithm. \n#' }\n#' \n#' @examples \n#'  MESDIF( paramFile = NULL,\n#'         training = habermanTra, \n#'         test = habermanTst, \n#'         output = c(\"optionsFile.txt\", \"rulesFile.txt\", \"testQM.txt\"),\n#'         seed = 0, \n#'         nLabels = 3,\n#'         nEval = 300, \n#'         popLength = 100, \n#'         eliteLength = 3,\n#'         crossProb = 0.6,\n#'         mutProb = 0.01, \n#'         RulesRep = \"can\",\n#'         Obj1 = \"CSUP\", \n#'         Obj2 = \"CCNF\",\n#'         Obj3 = \"null\",\n#'         Obj4 = \"null\",\n#'         targetClass = \"positive\"\n#'         )\n#' \n#' \\dontrun{\n#' Execution for all classes, see 'targetClass' parameter\n#' MESDIF( paramFile = NULL,\n#'         training = habermanTra, \n#'         test = habermanTst, \n#'         output = c(\"optionsFile.txt\", \"rulesFile.txt\", \"testQM.txt\"),\n#'         seed = 0, \n#'         nLabels = 3,\n#'         nEval = 300, \n#'         popLength = 100, \n#'         eliteLength = 3,\n#'         crossProb = 0.6,\n#'         mutProb = 0.01, \n#'         RulesRep = \"can\",\n#'         Obj1 = \"CSUP\", \n#'         Obj2 = \"CCNF\",\n#'         Obj3 = \"null\",\n#'         Obj4 = \"null\",\n#'         targetClass = \"null\"\n#'         )\n#'  }\n#' \n#' @export\nMESDIF <- function(paramFile = NULL,\n                   training = NULL, \n                   test = NULL, \n                   output = c(\"optionsFile.txt\", \"rulesFile.txt\", \"testQM.txt\"),\n                   seed = 0, \n                   nLabels = 3,\n                   nEval = 10000, \n                   popLength = 100, \n                   eliteLength = 3,\n                   crossProb = 0.6,\n                   mutProb = 0.01, \n                   RulesRep = \"can\",\n                   Obj1 = \"CSUP\", \n                   Obj2 = \"CCNF\",\n                   Obj3 = \"null\",\n                   Obj4 = \"null\",\n                   targetClass = \"null\"\n                   )\n{\n \n  if(is.null(paramFile)){\n    #Generate our \"parameters file\"\n    if(class(training) != \"keel\" | class(test) != \"keel\")\n      stop(\"'training' or 'test' parameters is not a KEEL class\")\n    \n    if(is.null(training) | is.null(test)) \n      stop(\"Not provided a 'test' or 'training' file and neither a parameter file. Aborting...\")\n    \n    if(training[[1]] != test[[1]] )\n      stop(\"datasets ('training' and 'test') does not have the same relation name.\")\n    \n    if(length(output) != 3 )\n      stop(\"You must specify three files to save the results.\")\n    \n    parametros <- list(seed = seed, \n                       algorithm = \"MESDIF\",\n                       outputData = output,\n                       nEval = nEval, \n                       popLength = popLength,\n                       elitePop = eliteLength,\n                       nLabels = nLabels,\n                       mutProb = mutProb,\n                       crossProb = crossProb,\n                       RulesRep = RulesRep,\n                       Obj1 = Obj1, \n                       Obj2 = Obj2,\n                       Obj3 = Obj3,\n                       Obj4 = Obj4,\n                       targetClass = targetClass)\n  } else {\n  # Parametros --------------------------\n    parametros <- .read.parametersFile2(file = paramFile)  # parametros del algoritmo\n    if(parametros$algorithm != \"MESDIF\") \n      stop(paste(\"The algorithm specificied (\", parametros$algorithm, \") in parameters file is not \\\"MESDIF\\\". Check parameters file. Aborting program...\"))\n    \n    test <- read.keel(file = parametros$inputData[2], nLabels = parametros$nLabels)        # test data\n    \n    training <- read.keel(file = parametros$inputData[1], nLabels = parametros$nLabels )   # training data\n  }\n  \n  #Check if the last variable is categorical.\n  if(training$atributeTypes[length(training$atributeTypes)] != 'c' | test$atributeTypes[length(test$atributeTypes)] != 'c')\n    stop(\"Target variable is not categorical.\")\n  \n  #Check number of fuzzy labels, if not the same, change it.\n  if(dim(training$fuzzySets)[1] != nLabels){\n    training <- modifyFuzzyCrispIntervals(training, nLabels)\n  }\n  if(dim(test$fuzzySets)[1] != nLabels){\n    test <- modifyFuzzyCrispIntervals(test, nLabels)\n  }\n  file.remove(parametros$outputData[which(file.exists(parametros$outputData))])\n \n  \n  if(tolower(parametros$RulesRep) == \"can\"){\n    DNF = FALSE\n  } else {\n    DNF = TRUE\n    vars <-  Reduce(f = '+', x = training[[\"conjuntos\"]], accumulate = TRUE)\n    vars <- vars[length(vars)]\n  }\n  \n  .show_parameters(params = parametros, train = training, test = test)\n  contador <- 0\n  \n  Objetivos <- .parseObjetives(parametros = parametros, \"MESDIF\", DNF)\n  \n  if(all(is.na(Objetivos[1:3]))) stop(\"No objective values selected. You must select, at least, one objective value. Aborting...\")\n  \n  cate <- training[[\"atributeTypes\"]][- length(training[[\"atributeTypes\"]])] == 'c'\n  num <- training[[\"atributeTypes\"]][- length(training[[\"atributeTypes\"]])] == 'r' | training[[\"atributeTypes\"]][- length(training[[\"atributeTypes\"]])] == 'e'\n \n  \n  #---------------------------------------------------\n  \n  \n  #----- OBTENCION DE LAS REGLAS -------------------\n  if(parametros$targetClass != \"null\"){ # Ejecuci?n para una clase\n    cat(\"\\n\", \"\\n\", \"Searching rules for only one value of the target class...\", \"\\n\", \"\\n\", file =\"\", fill = TRUE) \n    reglas <- .findRule(parametros$targetClass, \"MESDIF\", training, parametros, DNF, cate, num, Objetivos)\n    if(! DNF) \n      reglas <-  matrix(unlist(reglas), ncol =  training[[\"nVars\"]] + 1 , byrow = TRUE)\n    else \n      reglas <-  matrix(unlist(reglas), ncol = vars + 1 , byrow = TRUE)\n    \n  } else {  #Ejecucion para todas las clases\n    \n    cat(\"\\n\", \"\\n\", \"Searching rules for all values of the target class...\", \"\\n\", \"\\n\", file =\"\", fill = TRUE)  \n    \n    #If we are on Windowns, we cant use mclapply because it use FORK() for parallelism\n    if(Sys.info()[1] == \"Windows\")\n      reglas <- lapply(X = training$class_names, FUN = .findRule, \"MESDIF\",training, parametros, DNF, cate, num, Objetivos)\n    else\n      reglas <- parallel::mclapply(X = training$class_names, FUN = .findRule, \"MESDIF\",training, parametros, DNF, cate, num, Objetivos   , mc.cores = parallel::detectCores() - 1)\n  \n    \n    if(! DNF) \n      reglas <-  matrix(unlist(reglas), ncol =  training[[\"nVars\"]] + 1 , byrow = TRUE)\n    else \n      reglas <-  matrix(unlist(reglas), ncol = vars + 1 , byrow = TRUE)\n    \n  #Print Rules if we are not in Windows because mclapply doesnt show any output.\n  #if(Sys.info()[1] != \"Windows\")\n  }\n  for(i in seq_len(NROW(reglas))){\n    cat(\"GENERATED RULE\", i,   file = \"\", sep = \" \",fill = TRUE)\n    cat(\"GENERATED RULE\", i,   file = parametros$outputData[2], sep = \" \",fill = TRUE, append = TRUE)\n    .print.rule(rule = as.numeric( reglas[i, - NCOL(reglas)] ), max = training$conjuntos, names = training$atributeNames, consecuente = reglas[i, NCOL(reglas)], types = training$atributeTypes,fuzzySets = training$fuzzySets, categoricalValues = training$categoricalValues, DNF, rulesFile = parametros$outputData[2])\n    cat(\"\\n\",\"\\n\",  file = \"\", sep = \"\",fill = TRUE)\n    cat(\"\\n\",  file = parametros$outputData[2], sep = \"\",fill = TRUE, append = TRUE)\n  }\n    \n    \n  \n  \n  #---------------------------------------------------\n  \n  cat(\"\\n\", \"\\n\", \"Testing rules...\", \"\\n\", \"\\n\", file = \"\", sep = \" \", fill = TRUE)\n  \n  #--------  Testeo de las reglas --------------------\n  sumNvars <- 0\n  sumCov <- 0\n  sumFsup <- 0\n  sumCsup <- 0\n  sumCconf <- 0\n  sumFconf <- 0\n  sumUnus <- 0\n  sumSign <- 0\n  sumAccu <- 0\n  \n  n_reglas <- NROW(reglas)\n  for(i in seq_len(n_reglas)){\n    val <- .probeRule2(rule = reglas[i, - NCOL(reglas)], testSet = test, targetClass = reglas[i, NCOL(reglas)], numRule = i, parametros = parametros, Objetivos = Objetivos, Pesos = c(0.7,0.3,0), cate = cate, num = num, DNF = DNF)\n    test[[\"covered\"]] <- val[[\"covered\"]]\n    sumNvars <- sumNvars + val[[\"nVars\"]]\n    sumCov <- sumCov + val[[\"coverage\"]]\n    sumFsup <- sumFsup + val[[\"fsupport\"]]\n    sumCconf <- sumCconf + val[[\"cconfidence\"]]\n    sumFconf <- sumFconf + val[[\"fconfidence\"]]\n    sumUnus <- sumUnus + val[[\"unusualness\"]]\n    sumSign <- sumSign + val[[\"significance\"]]\n    sumAccu <- sumAccu + val[[\"accuracy\"]]\n  }\n  \n  \n  \n  #Medidas de calidad globales\n  cat(\"Global:\", file =\"\", fill = TRUE)\n  cat(paste(\"\\t - N_rules:\", NROW(reglas), sep = \" \"),\n      paste(\"\\t - N_vars:\", round(sumNvars / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - Coverage:\", round(sumCov / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - Significance:\", round(sumSign / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - Unusualness:\", round(sumUnus / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - Accuracy:\", round(sumAccu / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - CSupport:\", round(sum(test[[\"covered\"]] / test[[\"Ns\"]]), 6), sep = \" \"),\n      paste(\"\\t - FSupport:\", round(sumFsup / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - FConfidence:\", round(sumFconf / n_reglas, 6), sep = \" \"),\n      paste(\"\\t - CConfidence:\", round(sumCconf / n_reglas, 6), sep = \" \"),\n      file = \"\", sep = \"\\n\"\n  )\n  \n  #Medidas de calidad globales (Save in testMeasures File)\n  cat( \"Global:\",\n       paste(\"\\t - N_rules:\", nrow(reglas), sep = \" \"),\n       paste(\"\\t - N_vars:\", round(sumNvars / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - Coverage:\", round(sumCov / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - Significance:\", round(sumSign / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - Unusualness:\", round(sumUnus / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - Accuracy:\", round(sumAccu / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - CSupport:\", round(sum(test[[\"covered\"]] / test[[\"Ns\"]]), 6), sep = \" \"),\n       paste(\"\\t - FSupport:\", round(sumFsup / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - FConfidence:\", round(sumFconf / n_reglas, 6), sep = \" \"),\n       paste(\"\\t - CConfidence:\", round(sumCconf / n_reglas, 6), sep = \" \"),\n       file = parametros$outputData[3], sep = \"\\n\", append = TRUE\n  )\n  \n  #---------------------------------------------------\n  \n}\n\n\n\n.findRule <- function(targetClass, algorithm, training, parametros, DNF, cate, num, Objetivos, porcCob = 0.5, strictDominance = TRUE, reInit = TRUE, minCnf = 0.6){\n  #Check if target class is valid\n  if(! any(training$class_names == targetClass)) stop(\"Invalid target class value provided.\")\n  #cat(\" ? Target value:\", targetClass ,\"\\n\", file = \"\", sep = \" \", fill = TRUE)\n  \n  por_cubrir = training$examplesPerClass[[targetClass]]\n  rule <- .ejecutarga(algorithm = algorithm, dataset = training, targetClass = targetClass, n_vars = training$nVars, por_cubrir = por_cubrir, nLabels = parametros$nLabels, N_evals = parametros$nEval,  tam_pob = parametros$popLength, p_cross = parametros$crossProb, p_mut = parametros$mutProb, seed = parametros$seed, Objetivos = Objetivos, Pesos = c(0.7,0.3,0), DNFRules = DNF, cate = cate, num = num, elitism = parametros[[\"elitePop\"]], porcCob = porcCob, strictDominance = strictDominance, reInit = reInit, minCnf = minCnf)     \n  \n  \n  reglas <- vector(mode = \"list\", length = NROW(rule))\n  if(length(rule > 0)){\n    rule <- cbind(rule, targetClass)\n    for(i in seq_len(length(reglas))){\n      reglas[[i]] <- rule[i,]\n    }\n  }\n  reglas\n}",
    "created" : 1444991065896.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "172564738",
    "id" : "CC047ECA",
    "lastKnownWriteTime" : 1445006208,
    "path" : "E:/Escritorio/SDR/R/MESDIF.R",
    "project_path" : "R/MESDIF.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}