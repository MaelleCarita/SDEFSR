SDIGA(NULL, a,a)
library(SDR)
library(SDR)
SDIGA(NULL, a,a)
system.time( SDIGA(NULL, a,a) )
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
library(SDR)
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
which(input$targetClassSelect ==
dataTst[[2]])
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
shiny::runApp('~/MEGA/MEGAsync/Universidad/Investigacion/PlataformaWeb/webPlatform/R')
a$class_names
a$categoricalValues[5]
a$examplesPerClass
library(SDR)
changeTargetVariable(car, 3)
daatset[[2]]
dataset[[2]]
dataset$class_names
dataset[["class_names"]] <- dataset[["categoricalValues"]][[posVariable]]
dataset$class_names
dataset$categoricalValues
dataset$data
library(SDR)
changeTargetVariable(car, 3)
library(SDR)
changeTargetVariable(car, 3)
changeTargetVariable(car, 3)
dataset$examplesPerClass[[]] <- examplesPerClass
dataset$examplesPerClass[] <- examplesPerClass
dataset$examplesPerClass
dataset$examplesPerClass <- list(examplesPerClass)
dataset$examplesPerClass
changeTargetVariable(car, 3)
dataset$examplesPerClass
dataset$examplesPerClass <- examplesPerClass
dataset$examplesPerClass
dataset$examplesPerClass
changeTargetVariable(car, 3)
changeTargetVariable(car, 3)
dataset$categoricalValues
library(SDR)
changeTargetVariable(car, 3)
dataset$categoricalValues
shiny::runApp('R')
shiny::runApp('R')
dataTst
library(SDR)
shiny::runApp('R')
dataTst
changeTargetVariable(car,3)
changeTargetVariable(car,3)
dataset$categoricalValues
dataset$examplesPerClass
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
dataset$conjuntoa
dataset$conjuntos
dataset$conjuntos
library(SDR)
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
dataTst
library(SDR)
shiny::runApp('R')
changeTargetVariable(car, 5)
shiny::runApp('R')
MESDIF(NULL, car, car)
library(SDR)
MESDIF(training = car, test = car)
library(SDR)
library(SDR)
MESDIF(training = car, test = car)
library(SDR)
MESDIF(training = car, test = car)
MESDIF(training = car, test = car)
library(SDR)
shiny::runApp('R')
library(SDR)
MESDIF(NULL,car, car)
library(SDR)
library(SDR)
NMEEF_SD(NULL, car, car)
library(SDR)
NMEEF_SD(NULL, car, car)
library(SDR)
library(SDR)
NMEEF_SD(NULL, car, car)
shiny::runApp('R')
shiny::runApp('R')
tryCatch(changeTargetVariable(a, 2), "PESCOZON")
tryCatch(changeTargetVariable(a, 2), print("PESCOZON"))
tryCatch(changeTargetVariable(a, 2), print("PESCOZON"), finally = NULL)
tryCatch(changeTargetVariable(a, 2), print("PESCOZON"), finally = print("Holi"))
tryCatch(changeTargetVariable(a, 2), error = function(e) print("PESCOZON"), finally = print("Holi"))
tryCatch({changeTargetVariable(a, 2);changeTargetVariable(a, 3)} , error = function(e) print("PESCOZON"), finally = print("Holi"))
tryCatch({changeTargetVariable(a, 5);changeTargetVariable(a, 3)} , error = function(e) print("PESCOZON"), finally = print("Holi"))
tryCatch({changeTargetVariable(a, 5);changeTargetVariable(a, 5)} , error = function(e) print("PESCOZON"), finally = print("Holi"))
tryCatch({changeTargetVariable(a, 5);changeTargetVariable(a, 2)} , error = function(e) print("PESCOZON"))
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
print("h")
shiny::runApp('R')
print("h")
sink(NULL)
print("h")
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
SDIGA(NULL, car, car)
library(SDR)
SDIGA(NULL, car, car)
Q
library(SDR)
SDIGA(NULL, car, car)
SDIGA(NULL, car, car)
cat("Hola", file = "ruleFile.txt", fill = TRUE, append = TRUE)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
SDIGA(NULL, car, car, nEval = 500)
parametros$outputData[3]
n
c
n
library(SDR)
SDIGA(NULL, car, car, nEval = 500)
n
c
n
c
c
c
library(SDR)
MESDIF(NULL, car, car, nEval = 500)
library(SDR)
MESDIF(NULL, car, car, nEval = 500)
library(SDR)
MESDIF(NULL, car, car, nEval = 500)
MESDIF(NULL, car, car, nEval = 500)
library(SDR)
NMEEF_SD(NULL, car, car, nEval = 500)
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
launchInterface()
setwd("E:/Escritorio")
launchInterface()
path.package('SDR')
library(SDR)
launchInterface()
paste(path.package('SDR'), 'R', sep = "/")
library(SDR)
library(SDR)
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
.create_fuzzyIntervals
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
training$fuzzySets
nLabels
parametros$nLabels
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
shiny::runApp()
resultado@fitness
resultado@population
resultado
lista
lista > 0
library(SDR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
parseQualityMeasures()
grep("-" ,contents, fixed = TRUE)
grepl("-" ,contents, fixed = TRUE)
substr("0." ,contents, fixed = TRUE)
strsplit(contents, "0.", fixed = TRUE)
strsplit(contents, "Rule ", fixed = TRUE)
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
shiny::runApp()
contents
data.frame(contents, stringsAsFactors = FALSE)
data.frame(contents, ncol = 9, , stringsAsFactors = FALSE)
matrix(contents, ncol = 9)
matrix(contents, ncol = 9, byrow = TRUE)
mat <- matrix(contents, ncol = 9, byrow = TRUE)
matrix(contents, ncol = 9, byrow = TRUE, dimnames = list(row = NULL, col = c("NVar", "Coverage")))
names(mat)
names(mat) <- c("Cove", "sign")
mat
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
shiny::runApp()
contents
mat
shiny::runApp()
contents
mat <- matrix(contents, ncol = 10, byrow = TRUE)
mat
aux <- mat[seq_len(nrow(mat) - 1) , 10]
aux <- mat[seq_len(nrow(mat) - 1) , 1:9]
mat[seq_len(nrow(mat) - 1) , 2:10] <- aux
mat[seq_len(nrow(mat) - 1) , 1] <- NA
mat
library(SDR)
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(SDR)
shiny::runApp()
contents
mat
library(SDR)
shiny::runApp()
shiny::runApp()
max_valor_variables
nvars
max_valor_variables[variables]
max_valor_variables[variable]
DNFRules
nvars; nvariables
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
minimo
View(distancia)
View(FitnessND)
library(SDR)
shiny::runApp()
shiny::runApp()
library(SDR)
shiny::runApp()
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
strsplit(contents, "GENERATED RULE", fixed = TRUE)
rules <- strsplit(contents, "GENERATED RULE", fixed = TRUE)
rules <- rules[-1]
rules <- strsplit(contents, "GENERATED RULE", fixed = TRUE)
rules <- rules[[1]][2]
rules <- strsplit(contents, "GENERATED RULE", fixed = TRUE)
rules[[1]][2]
length(rules[[1]])
substr(rules[[1]][2:length(rules[[1]])] , 2, stop = nchar(rules[[1]][2:length(rules[[1]])]))
substr(rules[[1]][2:length(rules[[1]])] , 3, stop = nchar(rules[[1]][2:length(rules[[1]])]))
rules <- substr(rules[[1]][2:length(rules[[1]])] , 3, stop = nchar(rules[[1]][2:length(rules[[1]])]))
as.data.frame(rules)
shiny::runApp('R')
rules
shiny::runApp('R')
rules
gsub(pattern = "\n", x = rules, fixed = T)
gsub(pattern = "\n", x = rules, replacement = "<br/>", fixed = T)
rules <- gsub(pattern = "\n", x = rules, replacement = "<br/>", fixed = T)
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
"hola" == ["ho*"]
grep(pattern = "[No rul*]", x = "No rules found with a confidence greater than the specified", fixed = T)
grep(pattern = "No rul*", x = "No rules found with a confidence greater than the specified", fixed = T)
strsplit("No rules generated", "GENERATED RULE", fixed = TRUE, )
shiny::runApp('R')
library(SDR)
library(SDR)
NMEEF_SD(NULL, a,a)
Obj1 <- "null" ; Obj2 <- "null"
Objetivos
NMEEF_SD(NULL, a,a)
parametros$Obj1 <- "null"; parametros$Obj2 <- "null"
is.na(Objetivos[1:3])
Q
library(SDR)
shiny::runApp('R')
shiny::runApp('R')
.fit13(regla = rule, dataset = training, noClass = matrix(unlist(.separar(training)), nrow = length(training[[2]]) - 1, ncol = length(training[[7]])), targetClass = targetClass, por_cubrir = por_cubrir, n_Vars = training$nVars, nLabels = parametros$nLabels, max_regla = maxRule, marcar = TRUE, Objetivos = Objetivos, Pesos = Pesos, DNFRules = DNF, difuso = Objetivos[[4]], test = TRUE, cate = cate, num = num)
library(SDR)
shiny::runApp('R')
.fit13(regla = rule, dataset = training, noClass = matrix(unlist(.separar(training)),
nrow = length(training[[2]]) - 1, ncol = length(training[[7]])),
targetClass = targetClass, por_cubrir = por_cubrir, n_Vars = training$nVars,
nLabels = parametros$nLabels, max_regla = maxRule, marcar = TRUE,
Objetivos = Objetivos, Pesos = Pesos, DNFRules = DNF, difuso = Objetivos[[4]],
test = TRUE, cate = cate, num = num)
shiny::runApp('R')
shiny::runApp('R')
library(SDR)
shiny::runApp('R')
library(SDR)
setwd("E:/Escritorio/flare")
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
library(SDR)
setwd("~/EJECUCIONES DNF MESDIF/iris")
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
View(elitePop)
MESDIF("PARAM1.txt")
paste( print.rule(rule = as.numeric( rule[i, - NCOL(rule)] ), max = training$conjuntos, names = training$atributeNames, consecuente = targetClass, types = training$atributeTypes,fuzzySets = training$fuzzySets, categoricalValues = training$categoricalValues, DNF, rulesFile = parametros$outputData[2]) )
palabra <- paste( print.rule(rule = as.numeric( rule[i, - NCOL(rule)] ), max = training$conjuntos, names = training$atributeNames, consecuente = targetClass, types = training$atributeTypes,fuzzySets = training$fuzzySets, categoricalValues = training$categoricalValues, DNF, rulesFile = parametros$outputData[2]) )
MESDIF("PARAM1.txt")
max()
max
regla <- elitePop[1,]
regla
View(elitePop)
View(elitePop)
regla <- elitePop[3,]
for(i in seq_len(length(max) - 1)){
if(all(regla[(max[i] + 1):max[i+1]] == 1)){
regla[(max[i] + 1):max[i+1]] <- 0
}
}
regla
library(SDR)
MESDIF("PARAM1.txt")
View(UnionPop)
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
max
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
View(UnionPop)
View(UnionPop)
library(SDR)
MESDIF("PARAM1.txt")
UnionPop
as.matrix(UnionPop)
library(SDR)
MESDIF("PARAM1.txt")
View(UnionPop)
library(SDR)
MESDIF("PARAM1.txt")
MESDIF("PARAM1.txt")
library(SDR)
MESDIF("PARAM1.txt")
setwd("/media/045E13DD5E13C678")
install.packages("SDR_1.0.tar.gz", repos = NULL, type = "source")
remove.packages("SDR", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("shiny", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(SDR)
SDR_GUI()
library(SDR)
library(SDR)
library(SDR)
library(SDR)
SDR_GUI()
SDR_GUI()
library(SDR)
SDR_GUI()
library(SDR)
shiny::runApp('R')
save(car)
save(car, file = "car.rda")
library(SDR)
install.packages(c("roxygen2", "devtools", "microbenchmark", "GA", "ggplot2"))
install.packages("shiny")
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
car_Tra_3 <- read.keel("car-5-1tra.dat")
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/data")
car_Tra_3 <- read.keel("car-5-1tra.dat")
car_Tst_3 <- read.keel("car-5-1tst.dat")
car_Tra <- read.keel("car-5-1tra.dat")
car_Tst<- read.keel("car-5-1tst.dat")
german_Tra <- read.keel("german-5-1tra.dat")
german_Tst <- read.keel("german-5-1tst.dat")
haberman_Tra <- read.keel("haberman-5-1tra.dat")
haberman_Tst <- read.keel("haberman-5-1tst.dat")
save(car_Tra, file = "carTra.rda")
save(car_Tst, file = "carTst.rda")
save(german_Tra, file = "germanTra.rda")
save(german_Tst, file = "germanTst.rda")
save(haberman_Tra, file = "habermanTra.rda")
save(haberman_Tst, file = "habermanTst.rda")
habermanTra <- haberman_Tra
shiny::runApp('~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/R')
SDIGA(NULL, car_Tra, car_Tst)
shiny::runApp('~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/R')
file.exists("testQualityMeasures.txt")
shiny::runApp('~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR/R')
library(SDR)
shinyapps::deployApp("./inst/shiny")
remove.packages("SDR")
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp("./inst/shiny")
library(SDR)
SDR_GUI()
shinyapps::deployApp(./inst/shiny7)
shinyapps::deployApp(./inst/shiny)
shinyapps::deployApp("./inst/shiny")
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp("./inst/shiny")
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
library(SDR)
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
remove.packages("SDR")
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp("./inst/shiny")
library(SDR)
remove.packages("SDR")
devtools::install_github('aklxao2/SDR')
shinyapps::deployApp("./inst/shiny")
shiny::runApp('inst/shiny')
devtools::install_github('aklxao2/SDR')
devtools::install_github('aklxao2/SDR')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
