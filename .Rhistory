library(SDR)
b <- FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 10)
rulesToReturn[[1]]$rule
library(SDR)
a <- SDIGA(training = habermanTra, test = habermanTst, RulesRep = "dnf", nEval = 300)
b <- MESDIF(training = habermanTra, test = habermanTst, RulesRep = "dnf", nEval = 300)
c <- NMEEF_SD(training = habermanTra, test = habermanTst, RulesRep = "dnf", nEval = 300)
c <- NMEEF_SD(training = habermanTra, test = habermanTst, RulesRep = "dnf", nEval = 300, targetClass = "positive")
c <- NMEEF_SD(training = habermanTra, test = habermanTst, RulesRep = "can", nEval = 300, targetClass = "positive")
d <- FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 10)
sapply(d, function(x) c(1,x$qualityMeasures$Tpr, x$qualityMeasures$Fpr))
t(sapply(d, function(x) c(1,x$qualityMeasures$Tpr, x$qualityMeasures$Fpr)))
t(sapply(c, function(x) c(1,x$qualityMeasures$Tpr, x$qualityMeasures$Fpr)))
t(sapply(b, function(x) c(1,x$qualityMeasures$Tpr, x$qualityMeasures$Fpr)))
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
get_data <- function(country, year) {
c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="
c2 <- "&R=-1&C="
url <- paste0(c1, year, c2, country)
df <- data.frame(readHTMLTable(url))
keep <- c(2, 4, 5)
df <- df[,keep]
names(df) <- c("Age", "Male", "Female")
cols <- 2:3
df[,cols] <- apply(df[,cols], 2, function(x) as.numeric(as.character(gsub(",", "", x))))
df <- df[df$Age != 'Total', ]
df$Male <- -1 * df$Male
df$Age <- factor(df$Age, levels = df$Age, labels = df$Age)
df.melt <- melt(df,
value.name='Population',
variable.name = 'Gender',
id.vars='Age' )
return(df.melt)
}
nigeria <- get_data("NI", 2014)
library(XML)
library(reshape2)
library(ggplot2)
library(plyr)
get_data <- function(country, year) {
c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="
c2 <- "&R=-1&C="
url <- paste0(c1, year, c2, country)
df <- data.frame(readHTMLTable(url))
keep <- c(2, 4, 5)
df <- df[,keep]
names(df) <- c("Age", "Male", "Female")
cols <- 2:3
df[,cols] <- apply(df[,cols], 2, function(x) as.numeric(as.character(gsub(",", "", x))))
df <- df[df$Age != 'Total', ]
df$Male <- -1 * df$Male
df$Age <- factor(df$Age, levels = df$Age, labels = df$Age)
df.melt <- melt(df,
value.name='Population',
variable.name = 'Gender',
id.vars='Age' )
return(df.melt)
}
nigeria <- get_data("NI", 2014)
install.packages("XML")
test <- data.frame(v=sample(1:20,1000,replace=T), g=c('M','F'))
View(test)
ggplot(data=test,aes(x=as.factor(v),fill=g)) +
geom_bar(data=subset(test,g=="F")) +
geom_bar(data=subset(test,g=="M"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
sapply(d, function(x) data.frame(value = c(x$qualityMeasures$Tpr, x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
lapply(d, function(x) data.frame(value = c(x$qualityMeasures$Tpr, x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
s <- lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
do.call(rbind,s)
s <- do.call(rbind,s)
View(s)
View(s)
ggplot(data=s,aes(x=as.factor(qualityMeasure),fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
#scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=as.factor(qualityMeasure),fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
View(test)
ggplot(data=s,aes(x=as.factor(qualityMeasure),fill=value)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
subset(s,qualityMeasure=="TPR")
ggplot(data=s,aes(x=value,fill=qualityMeasure))
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"),stat = "identity", aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"),stat = "identity") +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"),aes(y=..count..*(-1))) +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - ..count..), position = "identity") +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - ..count..), position = "identity") +
#scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure))
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure)) +
geom_bar()
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure)) +
geom_histogram()
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure)) +
geom_bar(aes(fill = qualityMeasure))
ggplot(data = s, mapping = aes(x = value, fill = qualityMeasure)) +
geom_bar(aes(fill = qualityMeasure))
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure)) +
geom_bar(stat = "identity")
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6",)
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6")
View(s)
ggplot(data = s, mapping = aes(x = value, y = qualityMeasure, fill = Rule)) +
geom_bar(stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar()
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - ..count..), position = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - y), position = "identity")
s <- lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, - x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
s <- do.call(rbind,s)
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), position = "identity")
View(s)
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity")
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity", position = "stack") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity", position = "stack") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity", position = "dodge") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity", position = "dodge") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity", position = "fill") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity", position = "fill") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
ggplot(data=s,aes(x=value,fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - ..count..), position = "identity") +
#scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data=s,aes(x=value,y = Rule, fill=qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR")) +
geom_bar(data=subset(s,qualityMeasure=="FPR"), mapping = aes(y= - ..count..), position = "identity") +
#scale_y_continuous(breaks=seq(-40,40,10),labels=abs(seq(-40,40,10))) +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), position = "identity") +
coord_flip()
ggplot(data = s, mapping = aes(x = value, y = Rule, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
View(s)
s <- lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
s <- do.call(rbind,s)
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6")
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
library(SDR)
class(c)
plot(c)
library(SDR)
plotRules <- function(ruleSet){
packages <- installed.packages()[,1]
if(! "ggplot2" %in% packages){
if(tolower(.yesno("Package 'ggplot2' is not installed and must be installed to show the rule set plot. Do you want to install it? (Y/n): ")) == "y"){
install.packages("ggplot2")
}
}
library(ggplot2)
#Create a list with the neccessary data (Tpr, fpr and rule number)
#Crea lista con los datos (Falta meter el string que indica "Rule x")
s <- lapply(1:length(ruleSet),
function(count, x){
data.frame(value = c(x[[count]]$qualityMeasures$Tpr, - x[[count]]$qualityMeasures$Fpr), #Fpr goes in negative to show correctly in the graph
qualityMeasure = c("TPR", "FPR"), #To show the legend and set colours of the bars
Rule = c(paste("Rule", count), paste("Rule", count)))
})
#Join all elements of the list into a single data.frame
s <- do.call(rbind,s)
#Create the graph with ggplot
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
}
plotRules(c)
plotRules <- function(ruleSet){
packages <- installed.packages()[,1]
if(! "ggplot2" %in% packages){
if(tolower(.yesno("Package 'ggplot2' is not installed and must be installed to show the rule set plot. Do you want to install it? (Y/n): ")) == "y"){
install.packages("ggplot2")
}
}
library(ggplot2)
#Create a list with the neccessary data (Tpr, fpr and rule number)
#Crea lista con los datos (Falta meter el string que indica "Rule x")
s <- lapply(1:length(ruleSet),
function(count, x){
data.frame(value = c(x[[count]]$qualityMeasures$Tpr, - x[[count]]$qualityMeasures$Fpr), #Fpr goes in negative to show correctly in the graph
qualityMeasure = c("TPR", "FPR"), #To show the legend and set colours of the bars
Rule = c(paste("Rule", count), paste("Rule", count)))
}, ruleSet)
#Join all elements of the list into a single data.frame
s <- do.call(rbind,s)
#Create the graph with ggplot
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
}
plotRules(c)
library(SDR)
#Crea lista con los datos (Falta meter el string que indica "Rule x")
s <- lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, - x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
#Une todo en un array
s <- do.call(rbind,s)
#Crea el grafico
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6")
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
plotRules(b)
plotRules(a)
library(SDR)
plot(b)
plot.SDR_Rules(b)
library(SDR)
load("~/SDR/.RData")
library("roxygen2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(SDR)
plot(b)
library(SDR)
plot(b)
rm(plotRules())
rm(plotRules)
library(SDR)
plotRules(b)
load("~/SDR/.RData")
rm(get_data())
rm(get_data
)
setwd("~/Descargas")
concrete <- read.csv("concrete_data.csv")
View(concrete)
setwd("~/DATASETS KEEL/australian")
australian <- read.keel("australian.dat")
library(SDR)
australian <- read.keel("australian.dat")
sapply(concrete, class)
sapply(concrete, function(x) if(class(x) == "numeric") "r" else "c")
sapply(concrete, function(x) if(class(x) == "numeric") c(min(x), max(x)) else c(0,length(levels(x))))
View(concrete)
australian$categoricalValues[[1]]
names(australian)
australian$examplesPerClass
setwd("~/Descargas")
titanic <- read.csv("train.csv")
table(titanic$Embarked)
p <- table(titanic$Embarked)
p[1]
as.list(p)
names(australian)
australian$categoricalValues
names(australian)
lapply(titanic, function(x) if(class(x) == "numeric") NA else levels(x))
names(australian)
tt <- t(titanic)
tt <- as.data.frame(t(titanic))
tt <- as.data.frame(t(titanic), stringsAsFactors = F)
titanic <- read.csv("train.csv")
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
types
minMax
nvars
class_names
examplesClass
warning()
warnings()
warnings()
data
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
data
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
as.data.frame(t(data), stringsAsFactors = F)
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
warnings()
data
setwd("~/DATASETS KEEL/titanic")
titanic_KEEL <- read.keel("titanic.dat")
class(titanic_SDR)
setwd("~/DATASETS KEEL/australian")
australian <- read.keel("australian.dat")
a <- c(1,2,)
a <- c(1,2)
a[3]
library(SDR)
SDIGA
SDIGA(training = australian)
class(australian)
library(SDR)
SDIGA(training = australian)
library(SDR)
reglas <- SDIGA(training = australian)
reglas
sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence)
orden <- order(sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence))
reglas[orden]
orden <- order(sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence), decreasing = T)
reglas[[orden]]
reglas[orden]
library(SDR)
a
a[[1]]$qualityMeasures[["FuzzyConfidence"]]
names(a[[1]]$qualityMeasures)
class(a)
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", names(ruleSet[[1]]$qualityMeasures)))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(s)
orderRules(b)
orderRules(a)
class(b)
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", names(ruleSet[[1]]$qualityMeasures), collapse = ""))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", paste(names(ruleSet[[1]]$qualityMeasures, collapse = ", "))))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", paste(names(ruleSet[[1]]$qualityMeasures), collapse = ", ")))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
save(a, file = "./data/habermanRules.rda")
library(SDR)
habermanRules
library(SDR)
habermanRules
library("tools", lib.loc="/usr/lib/R/library")
tools::checkRdaFiles()
tools::checkRdaFiles(paths = "./data/")
install.packages("devtools")
library(SDR)
habermanRules
habermanTra
habermanRules <- a
library(SDR)
habermanRules
orderRules(habermanRules)
plotRules(habermanRules)
library(SDR)
help("habermanRules")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
habermanRules[[1]]
habermanRules[[1]]$rule
library(SDR)
habermanRules
