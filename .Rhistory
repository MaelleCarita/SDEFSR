s <- lapply(b, function(x) data.frame(value = c(x$qualityMeasures$Tpr, - x$qualityMeasures$Fpr), qualityMeasure = c("TPR", "FPR")))
#Une todo en un array
s <- do.call(rbind,s)
#Crea el grafico
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
s$Rule <- c("Rule 1", "Rule 1", "Rule 2", "Rule 2", "Rule 3", "Rule 3", "Rule 4", "Rule 4", "Rule 5", "Rule 5", "Rule 6", "Rule 6")
ggplot(data = s, mapping = aes(x = Rule, y = value, fill = qualityMeasure)) +
geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity") +
geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
coord_flip()
plotRules(b)
plotRules(a)
library(SDR)
plot(b)
plot.SDR_Rules(b)
library(SDR)
load("~/SDR/.RData")
library("roxygen2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(SDR)
plot(b)
library(SDR)
plot(b)
rm(plotRules())
rm(plotRules)
library(SDR)
plotRules(b)
load("~/SDR/.RData")
rm(get_data())
rm(get_data
)
setwd("~/Descargas")
concrete <- read.csv("concrete_data.csv")
View(concrete)
setwd("~/DATASETS KEEL/australian")
australian <- read.keel("australian.dat")
library(SDR)
australian <- read.keel("australian.dat")
sapply(concrete, class)
sapply(concrete, function(x) if(class(x) == "numeric") "r" else "c")
sapply(concrete, function(x) if(class(x) == "numeric") c(min(x), max(x)) else c(0,length(levels(x))))
View(concrete)
australian$categoricalValues[[1]]
names(australian)
australian$examplesPerClass
setwd("~/Descargas")
titanic <- read.csv("train.csv")
table(titanic$Embarked)
p <- table(titanic$Embarked)
p[1]
as.list(p)
names(australian)
australian$categoricalValues
names(australian)
lapply(titanic, function(x) if(class(x) == "numeric") NA else levels(x))
names(australian)
tt <- t(titanic)
tt <- as.data.frame(t(titanic))
tt <- as.data.frame(t(titanic), stringsAsFactors = F)
titanic <- read.csv("train.csv")
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
types
minMax
nvars
class_names
examplesClass
warning()
warnings()
warnings()
data
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
data
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
as.data.frame(t(data), stringsAsFactors = F)
library(SDR)
titanic_SDR <- SDR_DatasetFromCSV(file = "train.csv", relation_name = "Titanic")
warnings()
data
setwd("~/DATASETS KEEL/titanic")
titanic_KEEL <- read.keel("titanic.dat")
class(titanic_SDR)
setwd("~/DATASETS KEEL/australian")
australian <- read.keel("australian.dat")
a <- c(1,2,)
a <- c(1,2)
a[3]
library(SDR)
SDIGA
SDIGA(training = australian)
class(australian)
library(SDR)
SDIGA(training = australian)
library(SDR)
reglas <- SDIGA(training = australian)
reglas
sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence)
orden <- order(sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence))
reglas[orden]
orden <- order(sapply(reglas, function(x) x$qualityMeasures$FuzzyConfidence), decreasing = T)
reglas[[orden]]
reglas[orden]
library(SDR)
a
a[[1]]$qualityMeasures[["FuzzyConfidence"]]
names(a[[1]]$qualityMeasures)
class(a)
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", names(ruleSet[[1]]$qualityMeasures)))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(s)
orderRules(b)
orderRules(a)
class(b)
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", names(ruleSet[[1]]$qualityMeasures), collapse = ""))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", paste(names(ruleSet[[1]]$qualityMeasures, collapse = ", "))))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
orderRules <- function(ruleSet, by = "FuzzyConfidence"){
if(class(ruleSet) != "SDR_Rules"){
stop(paste(substitute(ruleSet), "is not a 'SDR_Rules' object"))
}
if(length(ruleSet) < 1){
stop(paste("Length of",substitute(ruleSet), "is less than 1."))
}
#Check if valid 'by' is chosen
if(! by %in% names(ruleSet[[1]]$qualityMeasures)){
stop(paste("Invalid 'by' value. Valid values are:", paste(names(ruleSet[[1]]$qualityMeasures), collapse = ", ")))
}
#Get the quality measure and get the order index
orden <- order(sapply(ruleSet, function(x, measure) x$qualityMeasures[[measure]], by), decreasing = T)
#Return the rule set ordered
result <- ruleSet[orden]
#Assing the SDR_Rules class
class(result) <- "SDR_Rules"
#Return
result
}
orderRules(a, by = "pene")
save(a, file = "./data/habermanRules.rda")
library(SDR)
habermanRules
library(SDR)
habermanRules
library("tools", lib.loc="/usr/lib/R/library")
tools::checkRdaFiles()
tools::checkRdaFiles(paths = "./data/")
install.packages("devtools")
library(SDR)
habermanRules
habermanTra
habermanRules <- a
library(SDR)
habermanRules
orderRules(habermanRules)
plotRules(habermanRules)
library(SDR)
help("habermanRules")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
habermanRules[[1]]
habermanRules[[1]]$rule
library(SDR)
habermanRules
library(SDR)
setwd("~/Descargas")
CSV <- read.dataset("train.csv")
class(CSV)
shiny::runApp('~/SDR/inst/shiny')
shiny::runApp('~/SDR/inst/shiny')
library(SDR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
habermanRules[[15]]
CSV[[15]]
CSV[[15]]
CSV[[15]]
shiny::runApp()
data
CSV$data
shiny::runApp()
datos
plot(datos[14,], datos[10])
plot(datos[14,], datos[10,])
input$numericRangeVisualization
input$numericRangeVisualization
shiny::runApp()
shiny::runApp()
range
shiny::runApp()
range
1:ncol(datos)
range
shiny::runApp()
range
ranges
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ranges
ranges
input$numericRangeVisualization
shiny::runApp()
input$numericRangeVisualization
shiny::runApp()
ranges
shiny::runApp()
ranges
ranges
ranges
shiny::runApp()
ranges
input$numericRangeVisualization
which(input$numericRangeVisualization[0] >= datos[pos,])
input$numericRangeVisualization[0]
input$numericRangeVisualization[1]
shiny::runApp()
ranges
input$numericRangeVisualization[2] <= datos[pos,]
shiny::runApp()
ranges
shiny::runApp()
ranges
input$numericRangeVisualization[1]
input$numericRangeVisualization[2]
datos[pos,] >= input$numericRangeVisualization[1] && datos[pos,] <= input$numericRangeVisualization[2]
datos[pos,] >= input$numericRangeVisualization[1] & datos[pos,] <= input$numericRangeVisualization[2]
shiny::runApp()
range
ranges
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
dataTra
class(dataTra)
class(data)
data$attributeTypes
View(s)
class(s$qualityMeasure)
class(s$Rule)
plot(s$qualityMeasure, s$Rule)
plot(s$qualityMeasure ~ as.factor(s$Rule))
plot(s$qualityMeasure , as.factor(s$Rule))
plot(s$qualityMeasure ~ as.factor(s$Rule), col = c("red", "skyblue", "yellow", "orange", "white", "black","royalblue2"))
plot(s$qualityMeasure , as.factor(s$Rule), col = c("red", "skyblue", "yellow", "orange", "white", "black","royalblue2"))
shiny::runApp()
class(datos)
datos
data
a <- print(data)
rm(a)
data$attributeTypes[pos1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rainbow(10)
colors()
terrain.colors(10)
pie(rep(1, 12), col = rainbow(12))
pie(rep(1, 12), col = rainbow(20))
pie(rep(1, 20), col = rainbow(20))
pie(rep(1, 20), col = topo.colors(20))
pie(rep(1, 20), col = heat.colors(20))
pie(rep(1, 20), col = cm.colors(20))
pie(rep(1, 20), col = terain.colors(20))
pie(rep(1, 20), col = terrain.colors(20))
shiny::runApp()
shiny::runApp()
datos[nrow(datos),1:7]
colorsWithContrast[datos[nrow(datos), ]]
shiny::runApp()
pie(rep(1, 20), col = terrain.colors(20))
pie(rep(1, 20), col = rainbow(20))
pie(rep(1, 30), col = rainbow(30))
seq(1,30, 3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('inst/shiny')
ranges1
input$numericRange1
shiny::runApp('inst/shiny')
length(ranges1); length(ranges2)
length(ranges1); length(ranges2)
length(intersect(ranges1, ranges2))
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
input$traTstRadio
input$visualization
dataTra$data
data$data
data$data
ranges1
ranges2
shiny::runApp('inst/shiny')
intersect(ranges1, ranges2)
length(intersect(ranges1, ranges2))
length(ranges1)
length(ranges2)
length(data$data[toKeep])
data$Ns
data$fuzzySets
data$examplesPerClass
datos
ncol(datos)
table(datos[nrow(datos),toKeep])
clValues <- unlist(lapply(data$data, '[', data$nVars + 1))
examplesPerClass <- lapply(X = seq_len(length(data$class_names)) - 1, FUN = function(x, data) sum(data == x), clValues)
Q
shiny::runApp('inst/shiny')
clValues <- unlist(lapply(data$data, '[', data$nVars + 1))
examplesPerClass <- lapply(X = seq_len(length(data$class_names)) - 1, FUN = function(x, data) sum(data == x), clValues)
names(examplesPerClass) <- data$class_names
examplesPerClass
data$covered
shiny::runApp('inst/shiny')
length(ranges1)
length(ranges2)
input$classNames
input$classNames
datos[3,]
shiny::runApp('inst/shiny')
input$classNames
which(data$class_names %in% input$classNames)
which(datos[nrow(datos),] +1 %in% which(data$class_names %in% input$classNames))
which((datos[nrow(datos),] +1) %in% which(data$class_names %in% input$classNames))
length(which((datos[nrow(datos),] +1) %in% which(data$class_names %in% input$classNames)))
shiny::runApp('inst/shiny')
data
data
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
b
sapply(1:length(b), function(x,b) c(x, b[[x]]$rule),b)
prueba <- sapply(1:length(b), function(x,b) c(x, b[[x]]$rule),b)
View(prueba)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
dataMatrix <- t(sapply(ruleSet, function(x) c(x$nVars,
x$qualityMeasures$Coverage,
x$qualityMeasures$Unusualness,
x$qualityMeasures$Significance,
x$qualityMeasures$FuzzySupport,
x$qualityMeasures$FuzzyConfidence,
x$qualityMeasures$CrispConfidence,
x$qualityMeasures$Tpr,
x$qualityMeasures$Fpr)))
View(dataMatrix)
rowMeans(dataMatrix)
dataMatrix[10,] <- rowMeans(dataMatrix)
dataMatrix <- rbind(dataMatrix,rowMeans(dataMatrix))
View(dataMatrix)
shiny::runApp('inst/shiny')
View(dataMatrix)
shiny::runApp('inst/shiny')
View(dataMatrix)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
shiny::runApp('inst/shiny')
SDR::plotRules(ruleSet)
ruleSet
library(SDR)
plotRules(b)
plotRules(b)
View(s)
View(s)
plotRules(a)
plotRules(a)
plotRules(a)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
subset(s, qualityMeasure == "TPR")
View(s)
subset(s, qualityMeasure == "FPR")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
subset(s, qualityMeasure == "FPR")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
View(s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s) + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), position = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
s$value
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
s[s$value == "TPR",""]
s[s$value == "TPR",]
s[s$qualityMeasure == "TPR",]
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",])
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "FPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure))
s[s$qualityMeasure == "TPR",]
subset(s, qualityMeasure == "TPR")
aux <- s$Rule
library(SDR)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
