ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
View(s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s) + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), position = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
s$value
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
s[s$value == "TPR",""]
s[s$value == "TPR",]
s[s$qualityMeasure == "TPR",]
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",])
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "FPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure))
s[s$qualityMeasure == "TPR",]
subset(s, qualityMeasure == "TPR")
aux <- s$Rule
library(SDR)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
library(SDR)
plotRules(habermanRules)
library(SDR)
plotRules(habermanRules)
library(SDR)
library(SDR)
a <- MESDIF(habermanTra, nEval = 300)
a <- MESDIF(training = habermanTra, nEval = 300)
class(habermanTra)
haberman <- read.dataset("../DATASETS KEEL/haberman/haberman.dat")
a <- MESDIF(training = haberman, nEval = 300)
plotRules(a)
plotRules(a)
library(SDR)
plotRules(a)
plotRules(a)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value)) +
ggplot2::geom_bar(data = subset(s, qualityMeasure == "TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value, fill = qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value, fill = qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")+
ggplot2::geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
ggplot2::coord_flip()
library(SDR)
shiny::runApp('inst/shiny')
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
shiny::runApp('inst/shiny')
c("shiny", "ggplot2") %in% installed.packages()[,1]
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
install.packages("RWeka")
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
install.packages("rsubgroup")
library("rsubgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
a <- rnorm(100)
b <- c("Hola", "Adios")
plot(a,b)
b <- replicate(50, b)
plot(a,b)
install.packages("mldr")
citation(mldr)
library(SDR)
SDR_GUI()
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDEFSR)
remove.packages("SDR", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
rm(orderRules)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
setwd("~/DATASETS KEEL/car")
carTra <- read.dataset("car-5-1tra.dat")
carTra <- read.dataset("car-5-1tst.dat")
carTra <- read.dataset("car-5-1tra.dat")
carTst <- read.dataset("car-5-1tst.dat")
germanTra <- read.dataset("../german/german-5-1tra.dat")
germanTst <- read.dataset("../german/german-5-1tst.dat")
habermanTra <- read.dataset("../haberman/haberman-5-1tra.dat")
habermanTst <- read.dataset("../haberman/haberman-5-1tst.dat")
setwd("~/SDR/data")
save(carTra, file = "carTra.rda")
save(carTst, file = "carTst.rda")
save(germanTra, file = "germanTra.rda")
save(germanTst, file = "germanTst.rda")
save(habermanTst, file = "habermanTst.rda")
save(habermanTra, file = "habermanTra.rda")
library(SDEFSR)
SDEFSR::habermanRules
warnings()
detach("package:SDEFSR", unload=TRUE)
library("SDEFSR")
detach("package:SDEFSR", unload=TRUE)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
habermanRules
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
read.dataset("../Escritorio/credit-g.arff")
library(SDEFSR)
read.dataset("../Escritorio/credit-g.arff")
set$relation
set$attributes
regmatches(x = set[[2]], gregexpr(pattern = "[/^{*}/$]", text = set[[2]]))
gsub(pattern = "[/^{*}/$]", replacement = "", x = set[[2]])
a <- gsub(pattern = "[/^{*}/$]", replacement = "", x = set[[2]])
a
a["employed"]
a["employment"]
class(a["employment"])
length(a["employment"])
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = set[[2]]))
a
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = set[[2]]))
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = "'non skilled'"))
regmatches(x = "'non skilled'", gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]"))
b <- "'non skilled'"
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
b <- c("'non skilled'", "rancio", "12eo")
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
b <- c("'non skilled',rancio,12eo")
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
set$attributes["employed"]
set$attributes["employment"]
b <- set$attributes["employment"]
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(\,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
shiny::runApp('inst/shiny')
library(SDEFSR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
set$attributes["job"]
b <- set$attributes["job"]
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "^[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "/^[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[/^[[:graph:]]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[/^[[:graph:]]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[^[[:graph:]]]*", text = b))
regmatches(x = b, gregexpr(pattern = "^[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "\^[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,| *)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|'.*'", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\')", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'^,)", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\',)", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\')", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'[^,/$])", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'[,/$])", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
b
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^( */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^ */$]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[ */$]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = b))
a <- 'non qualified mierda'
regmatches(x = a, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = a))
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'[^(,/$)]", text = a))
a <- "\'non qualified mierda\'"
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'[^(,/$)]", text = a))
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'", text = a))
regmatches(x = a, gregexpr(pattern = "\'", text = a))
regmatches(x = a, gregexpr(pattern = "\'.*", text = a))
regmatches(x = a, gregexpr(pattern = "\'.*\'", text = a))
regmatches(x = a, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$)]", text = a))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'^,", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'^,/$", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',/$", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
rgx <- "(?:{[^}\\s]*?(\\s+[^}\\s]*?)+}|(?<!\\\\)'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?<!\\\\)')(*SKIP)(*F)|\\s+"
regmatches(x = b, gregexpr(pattern = rgx, text = b))
regmatches(x = b, gregexpr(pattern = rgx, text = b, perl = T))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*,", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^,]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$| */$)]", text = b))
b
paste(b, set$attributes["employment"])
library(SDEFSR)
tprs <- sapply(habermanRules, function(x) x$qualityMeasures$Fpr)
tprs <- sapply(habermanRules, function(x) x$qualityMeasures$Tpr)
fprs <- sapply(habermanRules, function(x) x$qualityMeasures$Fpr)
plot(fprs, tprs, type = b)
plot(fprs, tprs, type = "b")
plot(c(0,fprs,1), c(0,tprs,1), type = "b")
roc = data.frame(x = fprs, y = tprs)
roc <- roc[order(roc$x, roc$y),]
View(roc)
plot(roc)
roc
roc = data.frame(x = c(0,fprs,1), y = c(0,tprs,1))
roc <- roc[order(roc$x, roc$y),]
roc = data.frame(x = fprs, y = tprs)
roc <- roc[order(roc$x, roc$y),]
roc = data.frame(x = c(0,fprs,1), y = c(0,tprs,1))
roc <- roc[order(roc$x, roc$y),]
View(roc)
order(roc$x,roc$y)
roc = data.frame(x = c(0,fprs,1), y = c(0,tprs,1))
roc <- roc[order(roc$x, roc$y),]
plot(roc)
plot(roc, type = "b")
plot(roc, type = "l")
library(SDEFSR)
shiny::runApp('inst/shiny')
library(SDEFSR)
shiny::runApp()
shiny::runApp()
regmatches(x = set[[2]], gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = set[[2]]))
regmatches(x = set[[2]], gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = set[[2]]))["job"]
regmatches(x = set[[2]], gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = set[[2]]))
regmatches(x = set[[2]], gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = set[[2]]))["job]"]
regmatches(x = set[[2]], gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = set[[2]]))["job"]
regmatches(x = set[[2]], gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = set[[2]]))
regmatches(x = set[[2]], gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = set[[2]]))
set[[@]]
set[[2]]
set[[2]]["class"]
regmatches(x = set[[2]], gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = set[[2]]))["class"]
regmatche(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]]", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]]", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "[[:blank:]]*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]]*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]]+", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "[[:blank:]]*.*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "[^[[:blank:]]*].*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]].*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "[[:blank:]].*", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "[[:blank:]]", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "^[[:blank:]]", text = set[[2]]["class"]))
regmatches(x = set[[2]]["class"], gregexpr(pattern = "/^[[:blank:]]", text = set[[2]]["class"]))
set[[2]]
regmatches(x = gsub(" ", "", set[[2]]), gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = gsub(" ", "", set[[2]])))["class"]
regmatches(x = gsub(" ", "", set[[2]]), gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = gsub(" ", "", set[[2]])))["job"]
regmatches(x = gsub("$ ", "", set[[2]]), gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = gsub("$ ", "", set[[2]])))["job"]
regmatches(x = gsub("$ ", "", set[[2]]), gregexpr(pattern = "(?<=')([^,]*?)(?=')|(^|(?<=,)|(?<=, ))([^,' ]*?)((?=,)|$)", perl = T, text = gsub("$ ", "", set[[2]])))["class"]
gsub("$ ", "", set[[2]])
gsub("[$ ] ", "", set[[2]])
library(SDEFSR)
shiny::runApp()
shiny::runApp()
library(SDEFSR)
MESDIF(training = habermanRules)
MESDIF(training = habermanTra)
class(habermanTra)
class(habermanTra) <- "SDEFSR_Dataset"
MESDIF(training = habermanTra)
library(SDEFSR)
a <- MESDIF(training = habermanTra)
class(habermanTra)
load("~/SDR/data/carTra.rda")
class(carTra)
library(SDEFSR)
names(habermanTra)
habermanTra$class_names
germanTra$categoricalValues
germanTra$attributeNames[20]
names(habermanTra)
habermanTra$sets
summary(habermanTra)
class(habermanRules)
names(habermanRules)
habermanRules
names(habermanRules[[1]])
class(habermanRules[[1]])
names(habermanRules[[1]]$qualityMeasures)
library("rsubgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(SDEFSR)
summary(carTra)
class(carTra)
class(carTra) <- "SDEFSR_Dataset"
summary(carTra)
setwd("~/DATASETS KEEL/iris")
irisFromKEEL <- read.dataset("iris.dat")
summary(irisFromKEEL)
irisFromKEEL$nVars
irisFromKEEL$attributeNames
ruleSet <- MESDIF(training = irisFromKEEL)
ruleSet <- MESDIF(paramFile = NULL, training = irisFromKEEL, test = NULL,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0, nLabels = 3, nEval = 300, popLength = 100,
eliteLength = 2, crossProb = 0.6, mutProb = 0.01,
RulesRep = "can", Obj1 = "CSUP", Obj2 = "CCNF", Obj3 = "null",
Obj4 = "null", targetVariable = "Survival",
targetClass = "positive")
ruleSet <- MESDIF(paramFile = NULL, training = irisFromKEEL, test = NULL,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0, nLabels = 3, nEval = 300, popLength = 100,
eliteLength = 2, crossProb = 0.6, mutProb = 0.01,
RulesRep = "can", Obj1 = "CSUP", Obj2 = "CCNF", Obj3 = "null",
Obj4 = "null", targetVariable = "Class",
targetClass = "Iris-virginica")
plotRules(ruleSet)
plotRules(habermanRules)
library(SDEFSR)
orderRules(ruleSet = , by = "Significance")
orderRules(ruleSet, by = "Significance")
sapply(ruleSet, function(rule, threshold){})
sapply(ruleSet, function(rule, threshold){
rule$nVars <= threshold
}, 2)
sapply(ruleSet, function(rule, threshold){
rule$nVars <= threshold
}, 1)
sapply(ruleSet, function(rule, threshold){rule$nVars <= threshold}, 2)
sapply(ruleSet, function(rule, threshold){rule$nVars <= threshold}, 1)
sapply(ruleSet, function(rule, threshold){rule$qualityMeasures$Significance <= threshold}, 10)
sapply(ruleSet, function(rule, threshold){rule$qualityMeasures$Fpr < threshold}, 0.5)
filter <- sapply(ruleSet, function(rule, threshold){rule$qualityMeasures$Fpr < threshold}, 0.5)
length(ruleSet[filter])
filter <- sapply(ruleSet, function(rule, threshold){
rule$nVars <= threshold}, 1)
length(ruleSet[filter])
SDEFSR::SDEFSR_GUI()
shiny::runApp('inst/shiny')
library(SDEFSR)
SDEFSR::SDEFSR_GUI()
library(SDEFSR)
SDEFSR_GUI()
a <- matrix(1:10, nrow = 5)
a <- as.data.frame(a)
apply(a, 1, sum)
View(a)
filter <- apply(a,MARGIN = 1, FUN = function(x) any(is.na(x)))
library(SDEFSR)
sparse <- read.dataset("../Escritorio/sparse.arff")
library(SDEFSR)
habermanRules
habermanRules[[1]]$rule
SDEFSR_GUI()
library(SDEFSR)
getMethods(habermanRules)
findMethods(habermanRules)
findMethods("SDR_Rules"habermanRules)
findMethods("SDR_Rules")
findMethods("SDEFSR_Rules")
class(x > 1)
class(fprs > 1)
library(SDEFSR)
library(SDEFSR)
class(habermanRules) <- "SDEFSR_Rules"
habermanRules[qualityMeasures$FPR < 0.5]
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
class(habermanRules)
habermanRules[Fpr < 0.5]
eval(Fpr < 0.5, habermanRules[[1]]$qualityMeasures, parent.frame())
eval(Fpr < 0.5, habermanRules[[1]]$qualityMeasures)
ls(envir = habermanRules[[1]]$qualityMeasures)
ls(envir = habermanRules)
ls(envir = habermanRules)
ls(envir = as.environment(habermanRules))
ls(envir = as.environment(habermanRules[[1]]))
eval(Fpr < 0.5, as.environment(habermanRules[[1]]$qualityMeasures))
ls(envir = as.environment(habermanRules[[1]]$qualityMeasures))
eval(Fpr < 0.5, as.environment(habermanRules[[1]]$qualityMeasures), enclos = parent.frame())
eval(.Fpr < 0.5, as.environment(habermanRules[[1]]$qualityMeasures), enclos = parent.frame())
eval(.Fpr < 0.5, as.environment(habermanRules[[1]]$qualityMeasures))
eval(.Fpr < 0.5, habermanRules[[1]]$qualityMeasures)
eval(Fpr < 0.5, habermanRules[[1]]$qualityMeasures)
class(FPR < 0.5)
library(SDEFSR)
habermanRules[Fpr < 0.5]
habermanRules[Fpr > 0.5]
habermanRules[Significance > 0.5]
library(SDEFSR)
habermanRules[Fpr > 0.5]
habermanRules[Fpr < 0.5]
ls(envir = as.environment(habermanRules))
library(SDEFSR)
habermanRules[Fpr < 0.5]
library(SDEFSR)
habermanRules[Fpr < 0.5]
library(SDEFSR)
habermanRules[Fpr < 0.5]
library(SDEFSR)
habermanRules[Fpr < 0.5]
library(SDEFSR)
habermanRules[Fpr > 0.5]
library(SDEFSR)
habermanRules[Fpr > 0.5]
habermanRules[Fpr < 0.5]
class(habermanRules[Fpr < 0.5])
habermanRules[Unusualness < 0.05 & Tpr > 0.9]
habermanRules[Unusualness > 0.05 & Tpr > 0.9]
library(SDEFSR)
FUGEPSD(training = habermanRules, numGenerations = 10)
class(habermanRules) <- "SDEFSR_Rules"
FUGEPSD(training = habermanRules, numGenerations = 10)
FUGEPSD(training = habermanTra, numGenerations = 10)
i$tokens
sum(i$tokens)
library(SDEFSR)
seq(1,to = 0, by = -0.02)
seq(1,to = 0, by = -0.02)
seq(1,to = 0, by = -0.1)
library(SDEFSR)
plotRules(habermanRules)
library(SDEFSR)
plotRules(habermanRules)
library(SDEFSR)
plotRules(habermanRules)
library(SDEFSR)
plotRules(habermanRules)
library(SDEFSR)
plotRules(habermanRules)
library(SDEFSR)
plotRules(habermanRules)
breaks
abs(breaks)
library(SDEFSR)
plotRules(habermanRules)
plotRules(irisFromKEEL)
plotRules(ruleSet)
library(SDEFSR)
plotRules(irisFromKEEL)
library(SDEFSR)
#Apply filter by unusualness
habermanRules[Unusualness > 0.05]
#Apply filter by unusualness
filteredRules <- habermanRules[Unusualness > 0.05]
#Apply the filter, in this case, we check only if the number of rules
#decrease. In this case, this value must be 1.
length(filteredRules)
#Also, you can make the filter as complex as you can
#Filter by Unusualness , TPr and number of variables
filteredRules <- habermanRules[Unusualness > 0.05 & TPr > 0.9 & nVars == 3]
length(filteredRules)
#Also, you can make the filter as complex as you can
#Filter by Unusualness , TPr and number of variables
filteredRules <- habermanRules[Unusualness > 0.05 & Tpr > 0.9 & nVars == 3]
length(filteredRules)
