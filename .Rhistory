<<<<<<< HEAD
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
carTra
devtools::install_github('aklxao2/SDR')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
devtools::install_github('aklxao2/SDR')
remove.packages("SDR")
devtools::install_github('aklxao2/SDR')
setwd("G:/Paquete R para Instalar")
install.packages("SDR_1.0.tar.gz", repos = "NULL", type = "source")
install.packages("SDR_1.0.tar.gz", repos = NULL, type = "source")
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
datasetTraining <- read.keel("datos entrenamiento.dat", nLabels = 5)
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
MESDIF(NULL, carTra, carTst)
?MESDIF
library("scales", lib.loc="E:/Programas/R-3.1.3/library")
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
detach("package:SDR", unload=TRUE)
detach("package:scales", unload=TRUE)
library("SDR")
mean(9,9,8.2,7.9,9.2,9,6,8)
mean(c(9,9,8.2,7.9,9.2,9,6,8))
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
a <- c(9.1, 10, 7, 7.2, 9, 8.2, 7, 10, 8, 8.3, 8.3, 9.2, 7.5, 7.6, 5, 7.8, 8.2, 9,9,8,8.5,9.5,9,9.9,9.3,9,6,8,8,7.8,10,10.8,7.9,9.2,9,9,8.2,10,10)
length(a)
a
a[32]
a[32] <- 10
a <- c(a,8)
length(a)
mean(a)
help(person)
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data
dataTra
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp()
shiny::runApp('inst/shiny')
dataTra
shiny::runApp('inst/shiny')
input$classNames
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data
data$atributeNames
shiny::runApp('inst/shiny')
data[[15]]
data$categoricalValues[pos]
data$categoricalValues[[pos]]
shiny::runApp('inst/shiny')
input$targetValueSelect
shiny::runApp('inst/shiny')
c("All Values", dataTra[[15]][[length(dataTra[[2]])]])
input$targetValueSelect
shiny::runApp('inst/shiny')
input$targetValueSelect
input$targetValueSelect
input$targetValueSelect
shiny::runApp('inst/shiny')
input$targetValueSelect
input$targetValueSelect
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
input$targetClassSelect
input$targetValueSelect
input$targetValueSelect
dataTra[[15]][[length(dataTra[[2]])]]
dataTra[[2]]
dataTra[[15]]
input$classNames
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
input$classNames
input$targetValueSelect
a <- NULL
length(a)
library(SDR)
shiny::runApp('inst/shiny')
input$classNames
shiny::runApp('inst/shiny')
class(data)
data[[2]]
data
input$targetClassSelect
data[[2]]
data[[15]][[pos]]
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data[[3]][which(data[[2]] == attribute)] == 'c'
class(attribute)
class(data)
data[[3]]
shiny::runApp('inst/shiny')
modifyFuzzyCrispIntervals(carTra, 2)
modifyFuzzyCrispIntervals(habermanTra, 2)
modifyFuzzyCrispIntervals(habermanTra, 15)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
tools::checkRdaFiles()
tools::checkRdaFiles("./data")
devtools::use_data(compress = "gzip")
library("tools", lib.loc="E:/Programas/R-3.1.3/library")
tools::resaveRdaFiles(compress = "gzip")
tools::resaveRdaFiles(paths = "./data", compress = "gzip")
library(SDR)
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEv))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 350))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 300))
library(SDR)
tools::showNonASCIIfile("./R/leerDatos.R")
tools::showNonASCIIfile("./R/leerDatos.R")
library(SDR)
library(SDR)
library(SDR)
tools::showNonASCIIfile("./R/MESDIF.R")
tools::showNonASCIIfile("./R/MESDIF.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/SDIGA.R")
tools::showNonASCIIfile("./R/SDIGA.R")
tools::showNonASCIIfile("./R/ga.R")
tools::showNonASCIIfile("./R/ga.R")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst)
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst)
MESDIF(NULL, habermanTra, habermanTst)
SDIGA(NULL, habermanTra, habermanTst)
citation("SDR")
bibentry(bibtype = "Manual",
title = "{nlme}: Linear and Nonlinear Mixed Effects Models",
author = c(person("Jose", "Pinheiro"),
person("Douglas", "Bates"),
person("Saikat", "DebRoy"),
person("Deepayan", "Sarkar"),
person("R Core Team")),
year = year,
note = note,
url = "http://CRAN.R-project.org/package=nlme")
year <- sub("-.*", "", meta$Date)
note <- sprintf("R package version %s", meta$Version)
bibentry(bibtype = "Manual",
title = "{nlme}: Linear and Nonlinear Mixed Effects Models",
author = c(person("Jose", "Pinheiro"),
person("Douglas", "Bates"),
person("Saikat", "DebRoy"),
person("Deepayan", "Sarkar"),
person("R Core Team")),
year = year,
note = note,
url = "http://CRAN.R-project.org/package=nlme")
citation("SDR")
citation("GA")
browseVignettes()
browseVignettes()
title: 'SDR: Subgroup Discovery algorithms for R'
source('~/.active-rstudio-document', echo=TRUE)
library(SDR)
library(SDR)
library(SDR)
library("GA", lib.loc="E:/Programas/R-3.1.3/library")
citation("GA")
library(SDR)
library(SDR)
citation("GA")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
SDIGA(NULL, habermanTra, haberm)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
?read.keel
library(SDR)
?read.keel
library(SDR)
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
SDR_GUI()
warnings()
unlist(reglas)
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
library(SDR)
SDR_GUI()
=======
install.packages("shiny")
>>>>>>> b8a3caeca0bb94526ec66e6ec9e9817516c927a1
library(SDR)
SDR_GUI()
habermanTra
library(SDR)
habermanTra$data
class(habermanTra$data[[244]])
germanTra$data
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
read.keel("banana-5-1tra.dat")
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR")
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
banana <- read.keel("banana-5-1tra.dat
")
banana <- read.keel("banana-5-1tra.dat")
list(banana$data, c(1,1,1))
length(banana$data)
banana$data[[length(banana$data) + 1]] <- c(1,2,3)
length(banana$data)
banana$data
rbind(banana$data, c(4,5,6))
install.packages("microbenchmark")
microbenchmark::microbenchmark(banana$data[length(banana$data) + 1] <- c(4,5,6))
warnings()
microbenchmark::microbenchmark(banana$data[[length(banana$data) + 1]] <- c(1,2,3))
class(list())
class(vector(0)
)
class(vector())
salida <- vector(mode = "list", length = length(banana$data) + 10)
salida[seq_len(length(banana$data))] <- banana$data
salida
library(SDR)
germanTra
germanTra$max
germanTra$data[[1]]
banana$categoricalValues
"ca" == banana$categoricalValues[[3]]
"1.0" == banana$categoricalValues[[3]]
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
library(SDR)
australian <- read.keel("australian-5-1tra.dat")
australian["categoricalValues"]
cValues <- which(australian$atributeTypes == "c")
cItem <- c(1, 2208.0, 1146.0, 2, 4.0, 4.0, 1585.0, 0, 0, 0.0, 1, 2, 100.0, 1213.0, 0)
catData <- cValues
rm(cValues)
cItem <- cItem[catData]
cvalues <- australian$categoricalValues[catData]
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == item[x])})
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == item[x])}, cvalues, cItem)
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == items[x])}, cvalues, cItem)
library(SDR)
.checkElement()
.checkElement
library(SDR)
library(SDR)
checkElement(c(0,0,"1.0"))
checkElement(c(0,0,"1.0"), banana)
library(SDR)
checkElement(c(0,0,"1.0"), banana)
library(SDR)
checkElement(c(0,0,"1.0"), banana)
all(nItem >= min & nItem <= max)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/saheart")
saheart <- read.keel("saheart-5-1tra.dat")
checkElement(c(118, 0.08, 3.48, 32.28, "Present", 52, 29.14, 3.81, 46, 0), saheart)
checkElement(c(118, 0.08, 3.48, 32.28, "Presente", 52, 29.14, 3.81, 46, 0), saheart)
banana$data
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
library(SDR)
banana <- read.keel("banana-5-1tra.dat")
addKeelRegister(c(1.14,-0.114,0), banana)
addKeelRegister(list(c(1.14,-0.114,0), c(1.14,-0.114,0), c(1.14,-0.114,0)), banana)
addKeelRegister(list(c(1.14,-0.114,"1.0"), c(1.14,-0.114,"-1.0"), c(1.14,-0.114,"1.0")), banana)
.processData
library(SDR)
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banan)
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
banana$categoricalValues
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
c(1.14, -0.114, "1.0")
as.numeric(c(1.14, -0.114, "1.0"))
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
processData("1.14, -0.114, 1.0", banana$categoricalValues, banana$atributeTypes)
processData("1.14, -0.114, -1.0", banana$categoricalValues, banana$atributeTypes)
nodo <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
class(nodo) <- "Node"
class(nodo)
new("Node")
new(Node)
newNode <- function(parent, left){
if(left){
parent$hijoIzq <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
} else {
parent$hijoDcha <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
}
parent
}
newNode(nodo, TRUE)
newNode <- function(parent, left){
if(left){
parent$hijoIzq <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
} else {
parent$hijoDcha <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
}
parent$isLeaf = FALSE
parent
}
nodo <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
newNode(nodo, TRUE)
arbol <- newNode(nodo, TRUE)
arbol <- newNode(nodo, FALSE)
arbol <- newNode(nodo, TRUE)
arbol <- newNode(arbol, TRUE)
arbol <- newNode(arbol$hijoIzq, TRUE)
arbol$hijoIzq <- newNode(arbol$hijoIzq, TRUE)
install.packages("roxygen2")
library(SDR)
?save.keel
data <- (1,2,3,"banana", 4, "perra", "Feo")
data <- c(1,2,3,"banana", 4, "perra", "Feo")
paste(data, sep = ", ")
paste(data, sep = ", ", collapse = "")
paste(data, collapse = ", ")
data <- list(c(1,2,3,"banana", 4, "perra", "Feo"), c(1,2,3,"banana", 4, "perra", "Feo"), c(1,2,3,"banana", 4, "perra", "Feo"))
lapply(data, paste, collapse = ", ")
library(SDR)
data <- list(c(0,0,"-1.0"), c(0,0,"-1.0"), c(0,0,"1.0"),c(0,0,"1.0"),)
data <- list(c(0,0,"-1.0"), c(0,0,"-1.0"), c(0,0,"1.0"),c(0,0,"1.0"))
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
resultDataset
resultDataset
resultDataset[(length(dataset$data) + 1):length(resultDataset)] <- data
resultDataset
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
banana <- read.keel("banana-5-1tra.dat")
length(banana$data)
banana$data
addKeelRegister(data, banana)
banana <- read.keel("banana-5-1tra.dat")
library(SDR)
banana <- read.keel("banana-5-1tra.dat")
banana$data
addKeelRegister(data, banana)
data[[1]][3] <- "h"
addKeelRegister(data, banana)
length(banana)
library(SDR)
save.keel(banana, "~/banana")
data <- list(c(0,0,1), c(0,1,1), c(0.2,0.3,0))
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
addKeelRegister(c(0,0,"-1.0"), banana)
library(SDR)
addKeelRegister(c(0,0,"-1.0"), banana)
addKeelRegister(c(0,0,"1.0"), banana)
addKeelRegister(c(0,0,0), banana)
addKeelRegister(c(0,0,6), banana)
addKeelRegister(c(0,0,3), banana)
addKeelRegister(c(0,0,2), banana)
addKeelRegister(c(0,0,1), banana)
library(SDR)
?addKeelRegister
library(SDR)
?addKeelRegister
library(SDR)
?addKeelRegister
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
<<<<<<< HEAD
?carTra
R.version
install.packages("RCurl")
library("RCurl", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.3")
install.packages("devtools")
devtoo
devtools::revdep_check()
install.packages("devtools")
install.packages(c("git2r", "rversions"))
install.packages("devtools")
install.packages(c("rversions","git2r"))
install.packages(c("rversions","git2r", "xml2"))
=======
>>>>>>> b8a3caeca0bb94526ec66e6ec9e9817516c927a1
