SDR::SDR_GUI()
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
carTra
devtools::install_github('aklxao2/SDR')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
devtools::install_github('aklxao2/SDR')
remove.packages("SDR")
devtools::install_github('aklxao2/SDR')
setwd("G:/Paquete R para Instalar")
install.packages("SDR_1.0.tar.gz", repos = "NULL", type = "source")
install.packages("SDR_1.0.tar.gz", repos = NULL, type = "source")
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
datasetTraining <- read.keel("datos entrenamiento.dat", nLabels = 5)
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
MESDIF(NULL, carTra, carTst)
?MESDIF
library("scales", lib.loc="E:/Programas/R-3.1.3/library")
library("SDR", lib.loc="E:/Programas/R-3.1.3/library")
detach("package:SDR", unload=TRUE)
detach("package:scales", unload=TRUE)
library("SDR")
mean(9,9,8.2,7.9,9.2,9,6,8)
mean(c(9,9,8.2,7.9,9.2,9,6,8))
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
a <- c(9.1, 10, 7, 7.2, 9, 8.2, 7, 10, 8, 8.3, 8.3, 9.2, 7.5, 7.6, 5, 7.8, 8.2, 9,9,8,8.5,9.5,9,9.9,9.3,9,6,8,8,7.8,10,10.8,7.9,9.2,9,9,8.2,10,10)
length(a)
a
a[32]
a[32] <- 10
a <- c(a,8)
length(a)
mean(a)
help(person)
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data
dataTra
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp()
shiny::runApp('inst/shiny')
dataTra
shiny::runApp('inst/shiny')
input$classNames
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data
data$atributeNames
shiny::runApp('inst/shiny')
data[[15]]
data$categoricalValues[pos]
data$categoricalValues[[pos]]
shiny::runApp('inst/shiny')
input$targetValueSelect
shiny::runApp('inst/shiny')
c("All Values", dataTra[[15]][[length(dataTra[[2]])]])
input$targetValueSelect
shiny::runApp('inst/shiny')
input$targetValueSelect
input$targetValueSelect
input$targetValueSelect
shiny::runApp('inst/shiny')
input$targetValueSelect
input$targetValueSelect
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
input$targetClassSelect
input$targetValueSelect
input$targetValueSelect
dataTra[[15]][[length(dataTra[[2]])]]
dataTra[[2]]
dataTra[[15]]
input$classNames
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
input$classNames
input$targetValueSelect
a <- NULL
length(a)
library(SDR)
shiny::runApp('inst/shiny')
input$classNames
shiny::runApp('inst/shiny')
class(data)
data[[2]]
data
input$targetClassSelect
data[[2]]
data[[15]][[pos]]
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
data[[3]][which(data[[2]] == attribute)] == 'c'
class(attribute)
class(data)
data[[3]]
shiny::runApp('inst/shiny')
modifyFuzzyCrispIntervals(carTra, 2)
modifyFuzzyCrispIntervals(habermanTra, 2)
modifyFuzzyCrispIntervals(habermanTra, 15)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
tools::checkRdaFiles()
tools::checkRdaFiles("./data")
devtools::use_data(compress = "gzip")
library("tools", lib.loc="E:/Programas/R-3.1.3/library")
tools::resaveRdaFiles(compress = "gzip")
tools::resaveRdaFiles(paths = "./data", compress = "gzip")
library(SDR)
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEv))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 350))
system.time(NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 300))
library(SDR)
tools::showNonASCIIfile("./R/leerDatos.R")
tools::showNonASCIIfile("./R/leerDatos.R")
library(SDR)
library(SDR)
library(SDR)
tools::showNonASCIIfile("./R/MESDIF.R")
tools::showNonASCIIfile("./R/MESDIF.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/NMEEFSD.R")
tools::showNonASCIIfile("./R/SDIGA.R")
tools::showNonASCIIfile("./R/SDIGA.R")
tools::showNonASCIIfile("./R/ga.R")
tools::showNonASCIIfile("./R/ga.R")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst)
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst)
MESDIF(NULL, habermanTra, habermanTst)
SDIGA(NULL, habermanTra, habermanTst)
citation("SDR")
bibentry(bibtype = "Manual",
title = "{nlme}: Linear and Nonlinear Mixed Effects Models",
author = c(person("Jose", "Pinheiro"),
person("Douglas", "Bates"),
person("Saikat", "DebRoy"),
person("Deepayan", "Sarkar"),
person("R Core Team")),
year = year,
note = note,
url = "http://CRAN.R-project.org/package=nlme")
year <- sub("-.*", "", meta$Date)
note <- sprintf("R package version %s", meta$Version)
bibentry(bibtype = "Manual",
title = "{nlme}: Linear and Nonlinear Mixed Effects Models",
author = c(person("Jose", "Pinheiro"),
person("Douglas", "Bates"),
person("Saikat", "DebRoy"),
person("Deepayan", "Sarkar"),
person("R Core Team")),
year = year,
note = note,
url = "http://CRAN.R-project.org/package=nlme")
citation("SDR")
citation("GA")
browseVignettes()
browseVignettes()
title: 'SDR: Subgroup Discovery algorithms for R'
source('~/.active-rstudio-document', echo=TRUE)
library(SDR)
library(SDR)
library(SDR)
library("GA", lib.loc="E:/Programas/R-3.1.3/library")
citation("GA")
library(SDR)
library(SDR)
citation("GA")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
SDIGA(NULL, habermanTra, haberm)
SDIGA(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
MESDIF(NULL, habermanTra, habermanTst)
library(SDR)
library(SDR)
?read.keel
library(SDR)
?read.keel
library(SDR)
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
SDR_GUI()
warnings()
unlist(reglas)
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
warnings()
warnings()
warnings()
warnings()
shiny::runApp('inst/shiny')
warnings()
parametros$outputData[2]
warnings()
shiny::runApp('inst/shiny')
warnings()
warnings()
value
lastValue
input$ejecutar
lastValue <<- value
lastValue
warnings()
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
dots[[9]]
values
Objetivos
is.function(Objetivos)
is.function(Objetivos[[1]])
is.function(Objetivos[[2]])
is.function(Objetivos[[3]])
is.function(Objetivos[[4]])
library(SDR)
NMEEF_SD
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
rule
reglas
warnings()
warnings()
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
rule
warnings()
warnings()
rule
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst, nEval = 500, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
warnings()
is.null(rule)
length(rule)
library(SDR)
SDR_GUI()
library(SDR)
library(SDR)
SDR_GUI()
NMEEF_SD(NULL, habermanTra, habermanTst, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null", minCnf = 1)
library(SDR)
NMEEF_SD(NULL, habermanTra, habermanTst, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null", minCnf = 1)
MESDIF(NULL, habermanTra, habermanTst, Obj1 = "UNUS", Obj2 = "null", Obj3 = "null")
habermanTra
library(SDR)
SDIGA(parameters_file = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
w1 = 0.7,
Obj2 = "CCNF",
w2 = 0.3,
Obj3 = "null",
w3 = 0,
minConf = 0.6,
lSearch = "yes",
targetClass = "positive")
library(SDR)
install.packages(c("boot", "class", "cluster", "codetools", "curl", "dplyr", "foreign", "ggvis", "httr", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "R6", "RCurl", "rpart", "scales", "spatial", "stringr", "survival"))
library(SDR)
devtools::use_vignette("SDRpackage")
rmarkdown::pdf_document(number_sections = TRUE)
install.packages("rsubgroup")
result2 <- DiscoverSubgroups(
credit.data, as.target("class", "good"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
library("rsubgroup", lib.loc="~/R/win-library/3.2")
library("rJava", lib.loc="~/R/win-library/3.2")
result2 <- DiscoverSubgroups(
credit.data, as.target("class", "good"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
library("SDR")
carTra
habermanTra
setwd("..")
library(SDR)
library(SDR)
library("SDR")
?MESDIF
irisTra <- read.keel("iris-5-1tra.dat")
irisTst <- read.keel("iris-5-1tst.dat")
library("SDR", lib.loc="~/R/win-library/3.2")
SDR::MESDIF( paramFile = NULL,
training = SDR::habermanTra,
test = SDR::habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 3,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetClass = "positive"
)
library(SDR)
SDR::MESDIF( paramFile = NULL,
training = SDR::habermanTra,
test = SDR::habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 3,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetClass = "positive"
)
reglas
library(SDR)
?NMEEF_SD
NMEEF_SD(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
mutProb = 0.1,
crossProb = 0.6,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
minCnf = 0.6,
reInitCoverage = "yes",
porcCob = 0.5,
StrictDominance = "yes",
targetClass = "positive"
)
library(SDR)
NMEEF_SD(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
mutProb = 0.1,
crossProb = 0.6,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
minCnf = 0.6,
reInitCoverage = "yes",
porcCob = 0.5,
StrictDominance = "yes",
targetClass = "positive"
)
Sys.Date()
date()
Sys.time()
as.Date(Sys.Date())
Sys.time()
as.POSIXct(Sys.time())
Sys.Date()
citation("rsubgroup")
citation("rJava")
tools::showNonASCIIfile("./vignettes/SDRpackage.Rmd")
tools::showNonASCIIfile("./vignettes/SDRpackage.Rmd")
tools::showNonASCIIfile("./vignettes/SDRpackage.Rmd")
tools::showNonASCIIfile("./vignettes/SDRpackage.Rmd")
library(SDR)
library(SDR)
library(SDR)
R CMD CHECK
install.packages(c("knitr", "roxygen2"))
library(SDR)
install.packages("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR_0.6.0.0.tar.gz", repos = NULL, type = "source")
install.packages("shiny")
install.packages("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR_0.6.0.0.tar.gz", repos = NULL, type = "source")
install.packages("devtools")
devtools::check(args = "--as-cran")
install.packages(c("knitr", "shiny", "roxygen2"))
install.packages("curl")
library("MASS")
install.packages("MASS")
install.packages("lattice")
install.packages("Matrix")
library("lattice", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.3")
detach("package:lattice", unload=TRUE)
View(installed.packages())
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("curl")
capabilities()["libcurl"]
libcurlVersion()
libcurlVersion()
capabilities()
capabilities()
library(SDR)
library(SDR)
habermanTra
library(SDR)
?carTra
R.version
install.packages("RCurl")
library("RCurl", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.3")
devtools::use_travis()
devtools::revdep_check()
library("devtools", lib.loc="E:/Programas/R-devel/library")
revdep_check()
