targetClass = "positive")
missing(params$inputData)
"inputData" %in% names(params)
library(SDR)
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
library(SDR)
substitute(substitute(train))
Q
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 20)
remove.packages("shiny")
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
install.packages("knitr")
install.packages("rmarkdown")
connect4
print(connect4)
summary(connect4)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
library(SDR)
shiny::runApp('inst/shiny')
install.packages("rsubgroup")
library("rsubgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
result3 <- DiscoverSubgroups(
credit.data, as.target("credit_amount"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
data(credit.data)
result3 <- DiscoverSubgroups(
credit.data, as.target("credit_amount"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
result3
a <- ToDataFrame(result3)
View(a)
install.packages("roxygen2")
library(SDR)
SDR_GUI()
library(SDR)
library(SDR)
carTra$examplesPerClass
setwd("~/DATASETS KEEL/australian")
library(SDR)
australian <- read.keel("australian-5-1tra.dat")
australian
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
is.na(parameters$targetVariable)
training$attributeNames[length(training$attributeNames)]
is.character(variable)
library(SDR)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
rule
FUGEPSD(training = australian, test = australian)
pop
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
pop
FUGEPSD(training = australian, test = australian)
library(SDR)
FUGEPSD(training = australian, test = australian)
library(SDR)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
summary(australian)
summary(banana)
library(SDR)
setwd("~/DATASETS KEEL/australian")
australian <- read.keel(file = "australian.dat")
library(SDR)
library(SDR)
SDIGA(training = australian, test = australian)
library(SDR)
SDIGA(training = australian, test = australian)
setwd("~/SDR")
library(SDR)
SDIGA(training = australian, test = australian)
library(SDR)
SDIGA(training = australian, test = australian)
library(SDR)
SDIGA(training = australian, test = australian)
library(SDR)
SDIGA(training = australian, test = australian)
library(SDR)
SDIGA(training = australian, test = australian)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
library(SDR)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
library(SDR)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
library(SDR)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
library(SDR)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
library(SDR)
SDIGA(training = australian, test = australian, RulesRep = "dnf")
MESDIF(training = australian, test = australian)
MESDIF(training = australian, test = australian, RulesRep = "dnf")
MESDIF(training = australian, test = australian, RulesRep = "dnf")
MESDIF(training = australian, test = australian, RulesRep = "dnf")
MESDIF(training = australian, test = australian, RulesRep = "dnf")
rules[[1]]$message
library(SDR)
MESDIF(training = australian, test = australian, RulesRep = "dnf")
MESDIF(training = australian, test = australian, RulesRep = "can")
NMEEF_SD(training = australian, test = australian)
library(SDR)
NMEEF_SD(training = australian, test = australian)
NMEEF_SD(training = australian, test = australian, targetClass = "0")
NMEEF_SD(training = australian, test = australian, targetClass = "0")
sample(length(maxRule), size = numInterv, replace = FALSE)
numInterv
length(maxRule)
library(SDR)
NMEEF_SD(training = australian, test = australian, targetClass = "0")
length(maxRule)
numInterv
NMEEF_SD(training = australian, test = australian, targetClass = "0")
NMEEF_SD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
rule
library(SDR)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = australian, test = australian)
setwd("~/DATASETS KEEL/breast")
breast <- read.keel("breast.dat")
setwd("~/DATASETS KEEL/connect-4")
connect_4 <- read.keel("connect-4.dat")
rm(connect_4)
setwd("~/DATASETS KEEL/flare")
read.keel("flare.dat")
flare <- read.keel("flare.dat")
setwd("~/DATASETS KEEL/german")
german <- read.keel("german.dat")
setwd("~/DATASETS KEEL/iris")
iris <- read.keel("iris.dat")
ls
ls()
for(i in ls()){
SDIGA(training = i, test = i)
}
substitute(i)
SDIGA(training = australian, test = australian)
SDIGA(training = breast, test = breast)
SDIGA(training = flare, test = flare)
SDIGA(training = australian, test = australian)
SDIGA(training = breast, test = breast)
SDIGA(training = flare, test = flare)
SDIGA(training = german, test = german)
SDIGA(training = german, test = german)
MESDIF(training = australian, test = australian)
MESDIF(training = breast, test = breast)
MESDIF(training = flare, test = flare)
MESDIF(training = german, test = german)
MESDIF(training = german, test = german)
NMEEF_SD(training = australian, test = australian)
NMEEF_SD(training = breast, test = breast)
NMEEF_SD(training = flare, test = flare)
NMEEF_SD(training = german, test = german)
NMEEF_SD(training = german, test = german)
FUGEPSD(training = australian, test = australian)
FUGEPSD(training = breast, test = breast)
FUGEPSD(training = flare, test = flare)
FUGEPSD(training = german, test = german)
FUGEPSD(training = german, test = german)
setwd("~/SDR/data")
carTra <- read.keel("~/DATASETS KEEL/car/car-5-1tra.dat")
carTst <- read.keel("~/DATASETS KEEL/car/car-5-1tst.dat")
germanTra <- read.keel("~/DATASETS KEEL/german/german-5-1tra.dat")
germanTst <- read.keel("~/DATASETS KEEL/german/german-5-1tst.dat")
habermanTra <- read.keel("~/DATASETS KEEL/haberman/haberman-5-1tra.dat")
habermanTst <- read.keel("~/DATASETS KEEL/haberman/haberman-5-1tst.dat")
save(carTra, file = "carTra.rda")
save(carTst, file = "carTst.rda")
save(germanTra, file = "germanTra.rda")
save(germanTst, file = "germanTst.rda")
save(habermanTra, file = "habermanTra.rda")
save(habermanTst, file = "habermanTst.rda")
library(SDR)
SDIGA(training = australian, test = australian)
SDIGA(training = habermanTra, test = habermanTst)
SDIGA(training = germanTra, test = germanTst)
rules
MESDIF(training = germanTra, test = germanTst)
SDIGA(training = carTra, test = carTst)
rules
SDIGA(training = habermanTra, test = habermanTst)
sum(dataset$covered)
sum(cover[[1]])
SDIGA(training = habermanTra, test = habermanTst)
to_cover
sum(training$covered)
sum(! training$covered)
SDIGA(training = habermanTra, test = habermanTst)
training$examplesPerClass
sum(x$covered[[1]])
rule
rules
x$cubreNuevos
x$covered
sum(training$covered)
rule
rules
matrix(c(1,2,3,4))
matrix(c(1,2,3,4), ncol = 2)
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
p[[2]]$tpr
warnings()
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
p[[2]]$tpr
p[[2]]$fpr
plot(p[[2]]$tpr, p[[2]]$fpr)
barplot(p[[2]]$tpr, p[[2]]$fpr)
p[[2]]
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
a <- SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
a <- SDIGA(training = habermanTra, test = habermanTst)
a[[1]]$nVars
a[[1]]$qualityMeasures$Significance
a[[1]]$qualityMeasures$Tpr
library(SDR)
library(SDR)
a <- NMEEF_SD(training = habermanTra, test = habermanTst)
1/0
library(SDR)
a <- NMEEF_SD(training = habermanTra, test = habermanTst)
a <- NMEEF_SD(training = habermanTra, test = habermanTst)
library(SDR)
a <- NMEEF_SD(training = habermanTra, test = habermanTst)
library(SDR)
a <- FUGEPSD(training = habermanTra, test = habermanTst)
pop[[2]]
library(SDR)
a <- FUGEPSD(training = habermanTra, test = habermanTst)
length(bestPop)
length(new_pop)
a <- FUGEPSD(training = habermanTra, test = habermanTst)
a <- new_pop[[1]]
a$antecedent
length(a$antecedent)
b <- new_pop[[2]]
length(b$antecedent)
b <- new_pop[[4]]
length(b$antecedent)
library(SDR)
a <- FUGEPSD(training = habermanTra, test = habermanTst)
a <- FUGEPSD(training = habermanTra, test = habermanTst)
a <- FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 10)
length(i$antecedent)
i$qm_tpr
i$qm_fpr
library(SDR)
a <- FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 10)
library(SDR)
a <- MESDIF(training = habermanTra, test = habermanTst)
View(rules)
View(rules)
library(SDR)
a <- MESDIF(training = habermanTra, test = habermanTst)
barplot(c(a[[1]]$qualityMeasures$Tpr, a[[1]]$qualityMeasures$Fpr), horiz = T)
barplot(c(a[[1]]$qualityMeasures$Tpr, a[[1]]$qualityMeasures$Fpr), horiz = T, beside = T)
barplot(c(0.7, 0.5), horiz = T, beside = T)
barplot(c(0.7, -0.5), horiz = T, beside = T)
barplot(c(0.7, -0.5), horiz = T, beside = F)
barplot(c(0.7, -0.5), horiz = T, beside = T)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
ggplot(c(0.3,-0.6), geom_bar(stat = "identity") + coord_flip())
ggplot(c(0.3,-0.6), geom_bar() + coord_flip())
ggplot(c(0.3,-0.6), geom_bar()
)
ggplot(c(0.3,-0.6), aes(y = 0) + geom_bar() + coord_flip())
ggplot(c(0.3,-0.6), aes(y = 0) + geom_bar(stat = "identity") + coord_flip())
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
a <- SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
a <- SDIGA(training = habermanTra, test = habermanTst)
rule
a <- SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
a <- SDIGA(training = habermanTra, test = habermanTst)
rule
class <- rule[length(rule)]
antecedent <- as.numeric(rule[- length(rule)])
dataset$attributeTypes
dataset$sets
for(i in seq_len(length(antecedent))){
if(antecedent[i] != dataset$sets){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string <- paste(string, "Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
}
}
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string <- paste(string, "Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
}
}
string <- ""
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string <- paste(string, "Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
}
}
string <- ""
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string <- paste(string, "Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
}}
string <- ""
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string <- paste(string, dataset$attributeNames[i]," = Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
}
}
count <- 1
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string[i] <- paste(dataset$attributeNames[i]," = Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
count <- count + 1
}
}
string
string <- NULL
count <- 1
for(i in seq_len(length(antecedent))){
if(antecedent[i] < dataset$sets[i]){
#If variable participates in the rule
if(dataset$attributeTypes[i] != "c"){
#Print real attribute
string[count] <- paste(dataset$attributeNames[i]," = Label", antecedent[i], "(", dataset$fuzzySets[antecedent[i] + 1,1,i], ",", dataset$fuzzySets[antecedent[i] + 1,2,i], ",", dataset$fuzzySets[antecedent[i] + 1,3,i], ")", sep = " ")
} else {
#Print categorical attribute
}
count <- count + 1
}
}
paste(string, collapse = " AND ")
paste(string, "THEN", class )
paste("IF", string, "THEN", class )
dataset$categoricalValues
a <- SDIGA(training = germanTra, test = germanTst)
library(SDR)
a <- SDIGA(training = germanTra, test = germanTst)
library(SDR)
a <- SDIGA(training = germanTra, test = germanTst)
string
a <- SDIGA(training = germanTra, test = germanTst)
a <- SDIGA(training = habermanTra, test = habermanTst)
