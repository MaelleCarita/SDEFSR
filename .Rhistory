examplesClass
conjunto[[3]]
longitud_categoricos
conjunto[[3]]
class(conjunto[[3]])
ecoli <- read.keel("ecoli.arff")
data
types
categoricalValues
lc
lc[i]
lc
Q
ecoli <- read.keel("ecoli.arff")
p <- as.data.frame(t(conjunto[[3]]), stringsAsFactors = FALSE)
class(p[,1])
library(SDR)
ecoli <- read.keel("ecoli.arff")
ecoli <- read.keel("ecoli.arff")
data
as.character(data)
library(SDR)
ecoli <- read.keel("ecoli.arff")
ecoli$data[1]
ecoli$data[80]
ecoli$data[600]
ecoli$data[200]
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
australianTra <- read.keel("australian-5-1tra.dat")
australianTra
MESDIF(training = ecoli, test = ecoli)
setwd("E:/Escritorio/SDR")
library(SDR)
setwd("E:/Downloads")
ecoli <- read.keel("ecoli.arff")
library(SDR)
ecoli <- read.keel("ecoli.arff")
conjunto[[]]
conjunto[[33]]
df <- conjunto[[3]]
class(df[,1])
View(df)
View(df)
View(df)
class(df[,8])
View(df)
as.integer(df[,1])
Q
ecoli <- read.keel("ecoli.arff")
df <- conjunto[[3]]
class(df[[,8]])
class(df[,8])
library(SDR)
carTra
carTra$atributeNames
summary(mat)
summary(iris)
library(SDR)
summary(banana)
summary(connect4)
library(SDR)
library(SDR)
summary(banana)
library(SDR)
summary(banana)
summary(connect4)
summary(as.data.frame(mat))
summary.data.frame
library(SDR)
summary(banana)
library(SDR)
summary(banana)
library(SDR)
summary(carTra)
carTra$nVars
carTra$atributeNames
print(carTra)
install.packages("mldr")
library(mldr)
emotions
a <- emotions
summary(a)
rm(a)
library(SDR)
changeTargetVariable(carTra, "Safety")
changeTargetVariable(carTra, "safety")
library(SDR)
p <- changeTargetVariable(carTra, "safety")
p <- changeTargetVariable(carTra, "Safety")
p$atributeNames
p <- changeTargetVariable(carTra, 6)
p$atributeNames
p <- changeTargetVariable(p, 6)
p$atributeNames
library(SDR)
library(SDR)
p <- changeTargetVariable(p, "doors")
p$atributeNames
a <- "Acceptability -> acc"
strsplit(a, " -> ")
a <- "Acceptability->acc"
strsplit(a, " -> ")
strsplit(a, "[[:blank:]]*->[[:blank]]*")
strsplit(a, "[[:blank:]]*->[[:blank:]]*")
a <- "Acceptability->   acc"
strsplit(a, "[[:blank:]]*->[[:blank:]]*")
a <- "Acceptability          ->   acc"
strsplit(a, "[[:blank:]]*->[[:blank:]]*")
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
training$atributeNames[length(training$atributesNames)]
training$atributeNames[length(training$atributeNames)]
library(SDR)
SDIGA(training = habermanTra, test = habermanTst)
SDIGA(training = habermanTra, test = habermanTst)
library(SDR)
SDIGA(training = carTra, test = carTst, targetVariable = "Safety")
MESDIF(training = carTra, test = carTst, targetVariable = "Safety")
NMEEF_SD(training = carTra, test = carTst, targetVariable = "Safety")
FUGEPSD(training = carTra, test = carTst, targetVariable = "Safety")
library(SDR)
FUGEPSD(training = carTra, test = carTst, targetVariable = "Safety")
library(SDR)
library(SDR)
FUGEPSD(training = carTra, test = carTst, targetVariable = "Safety")
matrix(data = unlist(iris$data), ncol = iris$nVars + 1, byrow = TRUE, dimnames = list(row = NULL, col = iris$atributeNames))
matrix(data = unlist(iris$data), ncol = iris$nVars + 1, byrow = TRUE, dimnames = list(examples = seq_len(iris$Ns), attributes = iris$atributeNames))
matrix(data = unlist(iris$data), ncol = iris$nVars + 1, byrow = TRUE, dimnames = list(seq_len(iris$Ns),iris$atributeNames))
matrix(data = unlist(iris$data), ncol = iris$nVars + 1, byrow = TRUE, dimnames = list(NULL,iris$atributeNames))
matrix(data = unlist(iris$data), ncol = iris$nVars + 1, byrow = TRUE, dimnames = list(example_number = seq_len(iris$Ns),iris$atributeNames))
library(SDR)
print(banana)
print(carTst)
a <- print(carTst)
View(a)
iris$categoricalValues
vapply(seq_len(carTst$nVars + 1), function(i, ejemplo, cateValues){
if(is.na(cateValues[[i]])){
as.character(ejemplo[i])
} else{
cateValues[[i]][ejemplo[i] + 1]
}
}, carTst$data[1], carTst$categoricalValues)
vapply(seq_len(carTst$nVars + 1), function(i, ejemplo, cateValues){
if(is.na(cateValues[[i]])){
as.character(ejemplo[i])
} else{
cateValues[[i]][ejemplo[i] + 1]
}
},character(1), carTst$data[1], carTst$categoricalValues)
carTst$data[1]
vapply(seq_len(carTst$nVars + 1), function(i, ejemplo, cateValues){
if(is.na(cateValues[[i]])){
as.character(ejemplo[i])
} else{
cateValues[[i]][ejemplo[i] + 1]
}
},character(1), carTst$data[[1]], carTst$categoricalValues)
vapply(seq_len(carTst$nVars + 1), function(i, ejemplo, cateValues){
if(is.na(cateValues[[i]][1])){
as.character(ejemplo[i])
} else{
cateValues[[i]][ejemplo[i] + 1]
}
}, character(1), carTst$data[[1]], carTst$categoricalValues)
lapply(carTst$data,
function(x, categoricos)
vapply(seq_len(length(x)), function(i, ejemplo, cateValues){
if(is.na(cateValues[[i]][1])){
as.character(ejemplo[i])
} else{
cateValues[[i]][ejemplo[i] + 1]
}
}, character(1), x, categoricos)
, carTst$categoricalValues
)
library(SDR)
library(SDR)
print(connect4)
print(carTst)
library(SDR)
print(iris)
print(habermanTst)
b <- "paco"
strsplit(b, "[[:blank:]]*->[[:blank:]]*")[[1]]
b <- "paco skjdf akjs djf aje"
strsplit(b, "[[:blank:]]*->[[:blank:]]*")[[1]]
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
MESDIF("PARAM1.txt")
library(SDR)
MESDIF("PARAM1.txt")
SDIGA("PARAM1.txt")
library(SDR)
SDIGA("PARAM1.txt")
SDIGA("PARAM1.txt")
SDIGA("PARAM1.txt")
parametros$targetVariable
library(SDR)
SDIGA("PARAM1.txt")
SDIGA("PARAM1.txt")
MESDIF(training = habermanTra, test = habermanTst, targetClass = positive)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "positive")
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative")
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 2)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
View(distancia)
sortedIndex
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
View(distancia)
View(distancia)
sortedIndex
sortedIndex
sortedIndex
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
c
c
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
n
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex[,1]
sortedIndex
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
col <- sortedIndex[,1]
col
which(columna == col)
pass <- x[(which(columna == col) + 1):individuos]
pass <- col[(which(columna == col) + 1):individuos]
pass
col[individuos] <- columna
col[(which(columna == col)):(individuos - 1)] <- pass
col <- sortedIndex[,1]
pos <- which(col == columna)
copy <- col[(pos+1):individuos]
col[pos:(individuos - 1)] <- copy
col[individuos] <- columna
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
sortedIndex
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
sortedIndex
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
sortedIndex
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 1)
sortedIndex
sortedIndex
sortedIndex
sortedIndex
sortedIndex
library(SDR)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 2)
MESDIF(training = habermanTra, test = habermanTst, targetClass = "negative", eliteLength = 2)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival"
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
missing(params$inputData)
"inputData" %in% names(params)
library(SDR)
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
library(SDR)
substitute(substitute(train))
Q
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
library(SDR)
MESDIF(paramFile = NULL,
training = habermanTra,
test = habermanTst,
output = c("optionsFile.txt", "rulesFile.txt", "testQM.txt"),
seed = 0,
nLabels = 3,
nEval = 300,
popLength = 100,
eliteLength = 2,
crossProb = 0.6,
mutProb = 0.01,
RulesRep = "can",
Obj1 = "CSUP",
Obj2 = "CCNF",
Obj3 = "null",
Obj4 = "null",
targetVariable = "Survival",
targetClass = "positive")
FUGEPSD(training = habermanTra, test = habermanTst, numGenerations = 20)
remove.packages("shiny")
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
library(SDR)
SDR_GUI()
shiny::runApp('inst/shiny')
library(SDR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDR)
install.packages("knitr")
install.packages("rmarkdown")
connect4
print(connect4)
summary(connect4)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
library(SDR)
shiny::runApp('inst/shiny')
install.packages("rsubgroup")
library("rsubgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
result3 <- DiscoverSubgroups(
credit.data, as.target("credit_amount"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
data(credit.data)
result3 <- DiscoverSubgroups(
credit.data, as.target("credit_amount"), new("SDTaskConfig",
attributes=c("checking_status", "employment")))
result3
a <- ToDataFrame(result3)
View(a)
install.packages("roxygen2")
library(SDR)
SDR_GUI()
