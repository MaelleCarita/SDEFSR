habermanRules
habermanTra
habermanRules <- a
library(SDR)
habermanRules
orderRules(habermanRules)
plotRules(habermanRules)
library(SDR)
help("habermanRules")
library(SDR)
library(SDR)
library(SDR)
library(SDR)
habermanRules[[1]]
habermanRules[[1]]$rule
library(SDR)
habermanRules
library(SDR)
setwd("~/Descargas")
CSV <- read.dataset("train.csv")
class(CSV)
shiny::runApp('~/SDR/inst/shiny')
shiny::runApp('~/SDR/inst/shiny')
library(SDR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
habermanRules[[15]]
CSV[[15]]
CSV[[15]]
CSV[[15]]
shiny::runApp()
data
CSV$data
shiny::runApp()
datos
plot(datos[14,], datos[10])
plot(datos[14,], datos[10,])
input$numericRangeVisualization
input$numericRangeVisualization
shiny::runApp()
shiny::runApp()
range
shiny::runApp()
range
1:ncol(datos)
range
shiny::runApp()
range
ranges
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ranges
ranges
input$numericRangeVisualization
shiny::runApp()
input$numericRangeVisualization
shiny::runApp()
ranges
shiny::runApp()
ranges
ranges
ranges
shiny::runApp()
ranges
input$numericRangeVisualization
which(input$numericRangeVisualization[0] >= datos[pos,])
input$numericRangeVisualization[0]
input$numericRangeVisualization[1]
shiny::runApp()
ranges
input$numericRangeVisualization[2] <= datos[pos,]
shiny::runApp()
ranges
shiny::runApp()
ranges
input$numericRangeVisualization[1]
input$numericRangeVisualization[2]
datos[pos,] >= input$numericRangeVisualization[1] && datos[pos,] <= input$numericRangeVisualization[2]
datos[pos,] >= input$numericRangeVisualization[1] & datos[pos,] <= input$numericRangeVisualization[2]
shiny::runApp()
range
ranges
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
dataTra
class(dataTra)
class(data)
data$attributeTypes
View(s)
class(s$qualityMeasure)
class(s$Rule)
plot(s$qualityMeasure, s$Rule)
plot(s$qualityMeasure ~ as.factor(s$Rule))
plot(s$qualityMeasure , as.factor(s$Rule))
plot(s$qualityMeasure ~ as.factor(s$Rule), col = c("red", "skyblue", "yellow", "orange", "white", "black","royalblue2"))
plot(s$qualityMeasure , as.factor(s$Rule), col = c("red", "skyblue", "yellow", "orange", "white", "black","royalblue2"))
shiny::runApp()
class(datos)
datos
data
a <- print(data)
rm(a)
data$attributeTypes[pos1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rainbow(10)
colors()
terrain.colors(10)
pie(rep(1, 12), col = rainbow(12))
pie(rep(1, 12), col = rainbow(20))
pie(rep(1, 20), col = rainbow(20))
pie(rep(1, 20), col = topo.colors(20))
pie(rep(1, 20), col = heat.colors(20))
pie(rep(1, 20), col = cm.colors(20))
pie(rep(1, 20), col = terain.colors(20))
pie(rep(1, 20), col = terrain.colors(20))
shiny::runApp()
shiny::runApp()
datos[nrow(datos),1:7]
colorsWithContrast[datos[nrow(datos), ]]
shiny::runApp()
pie(rep(1, 20), col = terrain.colors(20))
pie(rep(1, 20), col = rainbow(20))
pie(rep(1, 30), col = rainbow(30))
seq(1,30, 3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('inst/shiny')
ranges1
input$numericRange1
shiny::runApp('inst/shiny')
length(ranges1); length(ranges2)
length(ranges1); length(ranges2)
length(intersect(ranges1, ranges2))
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
input$traTstRadio
input$visualization
dataTra$data
data$data
data$data
ranges1
ranges2
shiny::runApp('inst/shiny')
intersect(ranges1, ranges2)
length(intersect(ranges1, ranges2))
length(ranges1)
length(ranges2)
length(data$data[toKeep])
data$Ns
data$fuzzySets
data$examplesPerClass
datos
ncol(datos)
table(datos[nrow(datos),toKeep])
clValues <- unlist(lapply(data$data, '[', data$nVars + 1))
examplesPerClass <- lapply(X = seq_len(length(data$class_names)) - 1, FUN = function(x, data) sum(data == x), clValues)
Q
shiny::runApp('inst/shiny')
clValues <- unlist(lapply(data$data, '[', data$nVars + 1))
examplesPerClass <- lapply(X = seq_len(length(data$class_names)) - 1, FUN = function(x, data) sum(data == x), clValues)
names(examplesPerClass) <- data$class_names
examplesPerClass
data$covered
shiny::runApp('inst/shiny')
length(ranges1)
length(ranges2)
input$classNames
input$classNames
datos[3,]
shiny::runApp('inst/shiny')
input$classNames
which(data$class_names %in% input$classNames)
which(datos[nrow(datos),] +1 %in% which(data$class_names %in% input$classNames))
which((datos[nrow(datos),] +1) %in% which(data$class_names %in% input$classNames))
length(which((datos[nrow(datos),] +1) %in% which(data$class_names %in% input$classNames)))
shiny::runApp('inst/shiny')
data
data
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
b
sapply(1:length(b), function(x,b) c(x, b[[x]]$rule),b)
prueba <- sapply(1:length(b), function(x,b) c(x, b[[x]]$rule),b)
View(prueba)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
dataMatrix <- t(sapply(ruleSet, function(x) c(x$nVars,
x$qualityMeasures$Coverage,
x$qualityMeasures$Unusualness,
x$qualityMeasures$Significance,
x$qualityMeasures$FuzzySupport,
x$qualityMeasures$FuzzyConfidence,
x$qualityMeasures$CrispConfidence,
x$qualityMeasures$Tpr,
x$qualityMeasures$Fpr)))
View(dataMatrix)
rowMeans(dataMatrix)
dataMatrix[10,] <- rowMeans(dataMatrix)
dataMatrix <- rbind(dataMatrix,rowMeans(dataMatrix))
View(dataMatrix)
shiny::runApp('inst/shiny')
View(dataMatrix)
shiny::runApp('inst/shiny')
View(dataMatrix)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
shiny::runApp('inst/shiny')
SDR::plotRules(ruleSet)
ruleSet
library(SDR)
plotRules(b)
plotRules(b)
View(s)
View(s)
plotRules(a)
plotRules(a)
plotRules(a)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
subset(s, qualityMeasure == "TPR")
View(s)
subset(s, qualityMeasure == "FPR")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
subset(s, qualityMeasure == "FPR")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
View(s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s) + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s, stat = "identity") + coord_flip()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), position = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"))
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data=s)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
s$value
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$value == "TPR",], stat = "identity")
s[s$value == "TPR",""]
s[s$value == "TPR",]
s[s$qualityMeasure == "TPR",]
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",])
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "TPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(data = s[s$qualityMeasure == "FPR",], stat = "identity")
ggplot2::ggplot(mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure))
s[s$qualityMeasure == "TPR",]
subset(s, qualityMeasure == "TPR")
aux <- s$Rule
library(SDR)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
plotRules(habermanRules)
library(SDR)
plotRules(habermanRules)
library(SDR)
plotRules(habermanRules)
library(SDR)
library(SDR)
a <- MESDIF(habermanTra, nEval = 300)
a <- MESDIF(training = habermanTra, nEval = 300)
class(habermanTra)
haberman <- read.dataset("../DATASETS KEEL/haberman/haberman.dat")
a <- MESDIF(training = haberman, nEval = 300)
plotRules(a)
plotRules(a)
library(SDR)
plotRules(a)
plotRules(a)
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value)) +
ggplot2::geom_bar(data = subset(s, qualityMeasure == "TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar()
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = s$Rule, y = s$value, fill = s$qualityMeasure)) +
ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value, fill = qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")
ggplot2::ggplot(data = s, mapping = ggplot2::aes(x = Rule, y = value, fill = qualityMeasure)) +
ggplot2::geom_bar(data=subset(s,qualityMeasure=="TPR"), stat = "identity")+
ggplot2::geom_bar(data=subset(s,qualityMeasure=="FPR"), stat = "identity") +
ggplot2::coord_flip()
library(SDR)
shiny::runApp('inst/shiny')
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
library(SDR)
plotRules(a)
shiny::runApp('inst/shiny')
c("shiny", "ggplot2") %in% installed.packages()[,1]
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
install.packages("RWeka")
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
install.packages("rsubgroup")
library("rsubgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
a <- rnorm(100)
b <- c("Hola", "Adios")
plot(a,b)
b <- replicate(50, b)
plot(a,b)
install.packages("mldr")
citation(mldr)
library(SDR)
SDR_GUI()
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
library(SDEFSR)
remove.packages("SDR", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
rm(orderRules)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
setwd("~/DATASETS KEEL/car")
carTra <- read.dataset("car-5-1tra.dat")
carTra <- read.dataset("car-5-1tst.dat")
carTra <- read.dataset("car-5-1tra.dat")
carTst <- read.dataset("car-5-1tst.dat")
germanTra <- read.dataset("../german/german-5-1tra.dat")
germanTst <- read.dataset("../german/german-5-1tst.dat")
habermanTra <- read.dataset("../haberman/haberman-5-1tra.dat")
habermanTst <- read.dataset("../haberman/haberman-5-1tst.dat")
setwd("~/SDR/data")
save(carTra, file = "carTra.rda")
save(carTst, file = "carTst.rda")
save(germanTra, file = "germanTra.rda")
save(germanTst, file = "germanTst.rda")
save(habermanTst, file = "habermanTst.rda")
save(habermanTra, file = "habermanTra.rda")
library(SDEFSR)
SDEFSR::habermanRules
warnings()
detach("package:SDEFSR", unload=TRUE)
library("SDEFSR")
detach("package:SDEFSR", unload=TRUE)
library(SDEFSR)
library(SDEFSR)
library(SDEFSR)
habermanRules
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
read.dataset("../Escritorio/credit-g.arff")
library(SDEFSR)
read.dataset("../Escritorio/credit-g.arff")
set$relation
set$attributes
regmatches(x = set[[2]], gregexpr(pattern = "[/^{*}/$]", text = set[[2]]))
gsub(pattern = "[/^{*}/$]", replacement = "", x = set[[2]])
a <- gsub(pattern = "[/^{*}/$]", replacement = "", x = set[[2]])
a
a["employed"]
a["employment"]
class(a["employment"])
length(a["employment"])
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = set[[2]]))
a
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = set[[2]]))
regmatches(x = set[[2]], gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = "'non skilled'"))
regmatches(x = "'non skilled'", gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]"))
b <- "'non skilled'"
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
b <- c("'non skilled'", "rancio", "12eo")
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
b <- c("'non skilled',rancio,12eo")
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
set$attributes["employed"]
set$attributes["employment"]
b <- set$attributes["employment"]
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(\,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
shiny::runApp('inst/shiny')
library(SDEFSR)
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
set$attributes["job"]
b <- set$attributes["job"]
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "^[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "/^[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[/^[[:graph:]]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[/^[[:graph:]]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[^[[:graph:]]]*", text = b))
regmatches(x = b, gregexpr(pattern = "^[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "\^[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,| *)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|'.*'", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\')", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'^,)", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\',)", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\')", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'[^,/$])", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]|\'.*\'[,/$])", text = b))
regmatches(x = b, gregexpr(pattern = "([[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
b
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^( */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^ */$]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[ */$]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$| */$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = b))
a <- 'non qualified mierda'
regmatches(x = a, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'[[:alnum:]]*\'[^(,/$)]", text = a))
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'[^(,/$)]", text = a))
a <- "\'non qualified mierda\'"
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'[^(,/$)]", text = a))
regmatches(x = a, gregexpr(pattern = "\'[[:alnum:]]*\'", text = a))
regmatches(x = a, gregexpr(pattern = "\'", text = a))
regmatches(x = a, gregexpr(pattern = "\'.*", text = a))
regmatches(x = a, gregexpr(pattern = "\'.*\'", text = a))
regmatches(x = a, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$)]", text = a))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$)]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'^,", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'^,/$", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',/$", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
rgx <- "(?:{[^}\\s]*?(\\s+[^}\\s]*?)+}|(?<!\\\\)'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?<!\\\\)')(*SKIP)(*F)|\\s+"
regmatches(x = b, gregexpr(pattern = rgx, text = b))
regmatches(x = b, gregexpr(pattern = rgx, text = b, perl = T))
regmatches(x = b, gregexpr(pattern = "[[:graph:]]*,", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^,]", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\',", text = b))
regmatches(x = b, gregexpr(pattern = "[[:alnum:]]*[^(,/$| */$)]|\'.*\'[^(,/$| */$)]", text = b))
b
paste(b, set$attributes["employment"])
