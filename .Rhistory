install.packages("shiny")
library(SDR)
SDR_GUI()
habermanTra
library(SDR)
habermanTra$data
class(habermanTra$data[[244]])
germanTra$data
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
read.keel("banana-5-1tra.dat")
setwd("~/MEGA/MEGAsync/Universidad/Trabajo Fin de Grado/SDR")
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
banana <- read.keel("banana-5-1tra.dat
")
banana <- read.keel("banana-5-1tra.dat")
list(banana$data, c(1,1,1))
length(banana$data)
banana$data[[length(banana$data) + 1]] <- c(1,2,3)
length(banana$data)
banana$data
rbind(banana$data, c(4,5,6))
install.packages("microbenchmark")
microbenchmark::microbenchmark(banana$data[length(banana$data) + 1] <- c(4,5,6))
warnings()
microbenchmark::microbenchmark(banana$data[[length(banana$data) + 1]] <- c(1,2,3))
class(list())
class(vector(0)
)
class(vector())
salida <- vector(mode = "list", length = length(banana$data) + 10)
salida[seq_len(length(banana$data))] <- banana$data
salida
library(SDR)
germanTra
germanTra$max
germanTra$data[[1]]
banana$categoricalValues
"ca" == banana$categoricalValues[[3]]
"1.0" == banana$categoricalValues[[3]]
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
library(SDR)
australian <- read.keel("australian-5-1tra.dat")
australian["categoricalValues"]
cValues <- which(australian$atributeTypes == "c")
cItem <- c(1, 2208.0, 1146.0, 2, 4.0, 4.0, 1585.0, 0, 0, 0.0, 1, 2, 100.0, 1213.0, 0)
catData <- cValues
rm(cValues)
cItem <- cItem[catData]
cvalues <- australian$categoricalValues[catData]
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == item[x])})
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == item[x])}, cvalues, cItem)
lapply(X = seq_len(length(cItem)), FUN = function(x, lista, items){ any(lista[[x]] == items[x])}, cvalues, cItem)
library(SDR)
.checkElement()
.checkElement
library(SDR)
library(SDR)
checkElement(c(0,0,"1.0"))
checkElement(c(0,0,"1.0"), banana)
library(SDR)
checkElement(c(0,0,"1.0"), banana)
library(SDR)
checkElement(c(0,0,"1.0"), banana)
all(nItem >= min & nItem <= max)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/saheart")
saheart <- read.keel("saheart-5-1tra.dat")
checkElement(c(118, 0.08, 3.48, 32.28, "Present", 52, 29.14, 3.81, 46, 0), saheart)
checkElement(c(118, 0.08, 3.48, 32.28, "Presente", 52, 29.14, 3.81, 46, 0), saheart)
banana$data
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
library(SDR)
banana <- read.keel("banana-5-1tra.dat")
addKeelRegister(c(1.14,-0.114,0), banana)
addKeelRegister(list(c(1.14,-0.114,0), c(1.14,-0.114,0), c(1.14,-0.114,0)), banana)
addKeelRegister(list(c(1.14,-0.114,"1.0"), c(1.14,-0.114,"-1.0"), c(1.14,-0.114,"1.0")), banana)
.processData
library(SDR)
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banan)
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
banana$categoricalValues
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
c(1.14, -0.114, "1.0")
as.numeric(c(1.14, -0.114, "1.0"))
processData(c(1.14, -0.114, "1.0"), banana$categoricalValues, banana$atributeTypes)
processData("1.14, -0.114, 1.0", banana$categoricalValues, banana$atributeTypes)
processData("1.14, -0.114, -1.0", banana$categoricalValues, banana$atributeTypes)
nodo <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
class(nodo) <- "Node"
class(nodo)
new("Node")
new(Node)
newNode <- function(parent, left){
if(left){
parent$hijoIzq <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
} else {
parent$hijoDcha <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
}
parent
}
newNode(nodo, TRUE)
newNode <- function(parent, left){
if(left){
parent$hijoIzq <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
} else {
parent$hijoDcha <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
}
parent$isLeaf = FALSE
parent
}
nodo <- list(
hijoIzq = list(),
hijoDcha = list(),
data = NA,
isLeaf = TRUE
)
newNode(nodo, TRUE)
arbol <- newNode(nodo, TRUE)
arbol <- newNode(nodo, FALSE)
arbol <- newNode(nodo, TRUE)
arbol <- newNode(arbol, TRUE)
arbol <- newNode(arbol$hijoIzq, TRUE)
arbol$hijoIzq <- newNode(arbol$hijoIzq, TRUE)
install.packages("roxygen2")
library(SDR)
?save.keel
data <- (1,2,3,"banana", 4, "perra", "Feo")
data <- c(1,2,3,"banana", 4, "perra", "Feo")
paste(data, sep = ", ")
paste(data, sep = ", ", collapse = "")
paste(data, collapse = ", ")
data <- list(c(1,2,3,"banana", 4, "perra", "Feo"), c(1,2,3,"banana", 4, "perra", "Feo"), c(1,2,3,"banana", 4, "perra", "Feo"))
lapply(data, paste, collapse = ", ")
library(SDR)
data <- list(c(0,0,"-1.0"), c(0,0,"-1.0"), c(0,0,"1.0"),c(0,0,"1.0"),)
data <- list(c(0,0,"-1.0"), c(0,0,"-1.0"), c(0,0,"1.0"),c(0,0,"1.0"))
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
resultDataset
resultDataset
resultDataset[(length(dataset$data) + 1):length(resultDataset)] <- data
resultDataset
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
banana <- read.keel("banana-5-1tra.dat")
length(banana$data)
banana$data
addKeelRegister(data, banana)
banana <- read.keel("banana-5-1tra.dat")
library(SDR)
banana <- read.keel("banana-5-1tra.dat")
banana$data
addKeelRegister(data, banana)
data[[1]][3] <- "h"
addKeelRegister(data, banana)
length(banana)
library(SDR)
save.keel(banana, "~/banana")
data <- list(c(0,0,1), c(0,1,1), c(0.2,0.3,0))
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
addKeelRegister(data, banana)
library(SDR)
addKeelRegister(data, banana)
addKeelRegister(c(0,0,"-1.0"), banana)
library(SDR)
addKeelRegister(c(0,0,"-1.0"), banana)
addKeelRegister(c(0,0,"1.0"), banana)
addKeelRegister(c(0,0,0), banana)
addKeelRegister(c(0,0,6), banana)
addKeelRegister(c(0,0,3), banana)
addKeelRegister(c(0,0,2), banana)
addKeelRegister(c(0,0,1), banana)
library(SDR)
?addKeelRegister
library(SDR)
?addKeelRegister
library(SDR)
?addKeelRegister
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
library(SDR)
MESDIF(training = habermanTra, test = habermanTst)
system.time(MESDIF(training = habermanTra, test = habermanTst))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst))
system.time(NMEEF_SD(training = habermanTra, test = habermanTst))
system.time(SDIGA(training = habermanTra, test = habermanTst))
system.time(MESDIF(training = habermanTra, test = habermanTst, nLabels = 5))
dim(banana$fuzzySets)
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst, nLabels = 5))
library(SDR)
system.time(MESDIF(training = habermanTra, test = habermanTst, nLabels = 5))
library(SDR)
Rprof(line.profiling = TRUE)
NMEEF_SD(training = habermanTra, test = habermanTst)
Rprof(NULL)
a <- summaryRprof()
a <- summaryRprof(lines = "both")
a$by.total
summary(matrix(runif(1000), ncol = 10))
library(SDR)
banana$data <- matrix(unlist(banana$data), nrow = banana$nVars + 1)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/banana")
banana <- read.keel(banana-5-1tra.dat)
banana <- read.keel("banana-5-1tra.dat")
banana$data <- matrix(unlist(banana$data), nrow = banana$nVars + 1)
MESDIF(training = banana, test = banana)
banana <- read.keel("banana-5-1tra.dat")
MESDIF(training = banana, test = banana)
library(SDR)
MESDIF(training = banana, test = banana)
library(SDR)
MESDIF(training = banana, test = banana)
MESDIF(training = banana, test = banana, seed = 133567)
library(SDR)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/connect 4")
connect4 <- read.keel("connect-4-5-1tra.dat")
names(connect4)
library(SDR)
summary(connect4)
library(SDR)
summary(connect4)
b <- summary(connect4)
b
library(rsubgroup)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
citation("caret")
connect4$covered <- logical(0)
object.size(connect4$data)
object.size(connect4$data) / 1024
object.size(connect4$data) / 1024 / 1024
object.size(connect4$covered) / 1024 / 1024
object.size(connect4$fuzzySets) / 1024
mat <- matrix(unlist(connect4$data), nrow = connect4$nVars + 1)
object.size(mat) / 1024 / 1024
View(mat)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/connect 4")
connect4 <- read.keel("connect-4-5-1tra.dat")
library(SDR)
connect4 <- read.keel("connect-4-5-1tra.dat")
data
data <- paste(data, collapse = "\n")
.processData(data, categorical_values, atribs_types)
line <- gsub("\n", " ")
line <- gsub("\n", " ", line)
line
2323935/43
connect4 <- read.keel("connect-4-5-1tra.dat")
connect4 <- read.keel("connect-4-5-1tra.dat")
.processData(data, categorical_values, atribs_types)
line <- paste(line, collapse = " ")
line <- matrix(line, nrow = length(categoricalValues))
lc <- line[,cat]
lc <- line[cat, ]
lc <- line[cat, ]
lc <- as.vector(lc)
cv == lc
lc <- matrix(lc, nrow = 43)
which(cv[[1]] == lc[1,])
which(lc[1,] == cv[[1]])
View(lc)
ncol(lc)
Q
library(SDR)
MESDIF(training = habermanTra, test = habermanTst)
training$fuzzySets <- NULL, training$crispSets <- NULL
training$fuzzySets <- NULL; training$crispSets <- NULL
training
names(training)
MESDIF(training = habermanTra, test = habermanTst)
training$fuzzySets <- NA; training$crispSets <- NA
names(training)
dim(training$fuzzySets)[1]
dim(training$fuzzySets)[1] != nLabels
training
training <- modifyFuzzyCrispIntervals(training, nLabels)
training
banana$fuzzySets
getOption("warn")
library(SDR)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/SOLO CON VARIABLES NUMERICAS/iris")
iris <- read.keel(file = "iris-5-1tra.dat")
iris <- read.keel(file = "iris-5-1tra.dat")
library(SDR)
iris <- read.keel(file = "iris-5-1tra.dat")
iris
library(SDR)
iris <- read.keel(file = "iris-5-1tra.dat")
iris
MESDIF(training = iris, test = iris)
library(SDR)
MESDIF(training = iris, test = iris)
shiny::runApp('E:/Escritorio/SDR/inst/shiny')
MESDIF(training = iris, test = iris)
MESDIF(training = iris, test = iris)
library(SDR)
MESDIF(training = iris, test = iris)
library(SDR)
MESDIF(training = iris, test = iris)
MESDIF(training = habermanTra, test = habermanTst)
library(SDR)
MESDIF(training = habermanTra, test = habermanTst)
library(SDR)
MESDIF(training = habermanTra, test = habermanTst)
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
australianTra <- read.keel("australian-5-1tra.dat")
australianTst <- read.keel("australian-5-1tst.dat")
MESDIF(training = australianTra, test = australianTst)
library(SDR)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
MESDIF(training = australianTra, test = australianTst)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
MESDIF(training = australianTra, test = australianTst)
MESDIF(training = australianTra, test = australianTst)
training
Q
library(SDR)
MESDIF(training = australianTra, test = australianTst)
MESDIF(training = australianTra, test = australianTst)
training
training$fuzzySets
training$conjuntos
training$crispSets
library(SDR)
MESDIF(training = australianTra, test = australianTst)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
MESDIF(training = australianTra, test = australianTst)
tabla
cov_examplesCrisp
MESDIF(training = banana, test = banana)
tabla
cov_examplesCrisp
library(SDR)
MESDIF(training = banana, test = banana)
tabla
library(SDR)
MESDIF(training = banana, test = banana)
tabla
MESDIF(training = banana, test = banana)
MESDIF(training = banana, test = banana)
MESDIF(training = australianTra, test = australianTst)
library(SDR)
MESDIF(training = australianTra, test = australianTst)
australianTra$conjuntos
australianTra$fuzzySets
setwd("E:/Downloads")
ecoli <- read.keel("ecoli.arff")
library(SDR)
ecoli <- read.keel("ecoli.arff")
ecoli$class_names
ecoli <- read.keel("ecoli.arff")
examplesClass
conjunto[[3]]
longitud_categoricos
conjunto[[3]]
class(conjunto[[3]])
ecoli <- read.keel("ecoli.arff")
data
types
categoricalValues
lc
lc[i]
lc
Q
ecoli <- read.keel("ecoli.arff")
p <- as.data.frame(t(conjunto[[3]]), stringsAsFactors = FALSE)
class(p[,1])
library(SDR)
ecoli <- read.keel("ecoli.arff")
ecoli <- read.keel("ecoli.arff")
data
as.character(data)
library(SDR)
ecoli <- read.keel("ecoli.arff")
ecoli$data[1]
ecoli$data[80]
ecoli$data[600]
ecoli$data[200]
setwd("~/MEGA/MEGAsync/Universidad/Investigacion/DATASETS/MIXTOS/australian")
australianTra <- read.keel("australian-5-1tra.dat")
australianTra
MESDIF(training = ecoli, test = ecoli)
setwd("E:/Escritorio/SDR")
library(SDR)
setwd("E:/Downloads")
ecoli <- read.keel("ecoli.arff")
library(SDR)
ecoli <- read.keel("ecoli.arff")
conjunto[[]]
conjunto[[33]]
df <- conjunto[[3]]
class(df[,1])
View(df)
View(df)
View(df)
class(df[,8])
View(df)
as.integer(df[,1])
Q
ecoli <- read.keel("ecoli.arff")
df <- conjunto[[3]]
class(df[[,8]])
class(df[,8])
